* Basic Settings
#+BEGIN_SRC emacs-lisp :results none
  ;;; -*- lexical-binding: t; -*-
  (setq user-full-name "Lance Bergeron"
	user-mail-address "bergeron.lance6@gmail.com")

  (setq inhibit-startup-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message user-login-name
	inhibit-default-init t
	initial-scratch-message nil
	initial-major-mode 'fundamental-mode
	kill-buffer-query-functions nil)

  (fset 'yes-or-no-p 'y-or-n-p)                ; y or n prompt, not yes or no

  (menu-bar-display-line-numbers-mode 'visual) ; relative line numbers
  (global-display-line-numbers-mode 1)         ; always show line numbers

  ;; Optimizations
  (setq idle-update-delay 1
	auto-mode-case-fold nil)

  (setq bidi-inhibit-bpa t)

  (setq-default bidi-display-reordering 'left-to-right
		bidi-paragraph-direction 'left-to-right
		cursor-in-non-selected-windows nil)

  ;; (setq fast-but-imprecise-scrolling t
  (setq frame-inhibit-implied-resize t
	inhibit-compacting-font-caches t
	highlight-nonselected-windows nil
	ffap-machine-p-known 'reject)

  ;; Keeping ~/.emacs.d organized
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
	custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
* Keymap Management
#+BEGIN_SRC emacs-lisp :results none
  (use-package general                  ; unified way to map keybindings; works with :general in use-package
    :demand t
    :config
    (general-create-definer my-leader-def
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC")

    (general-create-definer my-localleader-def
      :states '(normal visual insert emacs)
      :prefix ","
      :non-normal-prefix "M-,")

    (general-evil-setup)
    (my-leader-def
      "f"  '(:ignore t                    :which-key "Find")
      "fm" '(general-describe-keybindings :which-key "list keybindings")
      "q"  '(save-buffers-kill-emacs      :which-key "save buffers & quit emacs")
      ","  '(dired-jump                   :which-key "open dired")
      "fd" '(dired                        :which-key "navigate to a directory")))

  (use-package which-key                ; show keybindings following when a prefix is pressed
    :diminish
    :defer 0.1
    :custom
    (which-key-sort-order #'which-key-prefix-then-key-order)
    (which-key-min-display-lines 6)
    (which-key-add-column-padding 1)
    (which-key-sort-uppercase-first nil)
    :config
    (which-key-mode))

  (use-package hydra
    :defer t)

  (use-package diminish
    :demand t)
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp :results none
  (use-package evil
    :demand t
    :diminish
    :hook (after-init . evil-mode)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    (evil-search-wrap t)
    (evil-want-keybinding nil)
    :general
    (evil-ex-completion-map ";" 'exit-minibuffer) ; use ; to complete : vim commands
    ('(normal visual motion)
     ";" 'evil-ex ; switch ; and :
     "M-;" 'evil-repeat-find-char
     "M-," 'evil-repeat-find-char-reverse
     "H" "^"
     "L" "$")
    (general-nmap
      ;; Remaps
      "gm" 'evil-execute-macro ; run vim macros
      "]b" '(evil-next-buffer :which-key "next buffer")
      "[b" '(evil-prev-buffer :which-key "previous buffer"))
    (my-leader-def
      ;; avy
      "fc" '(evil-avy-goto-char                 :which-key "char")
      "fC" '(evil-avy-goto-char-2               :which-key "2-chars")
      "fL" '(evil-avy-goto-line                 :which-key "line")

      "h" (general-simulate-key "C-h"           :which-key "Help")
      ;; Windows
      ";"  '(shell-command                      :which-key "shell command")
      "w"  '(:ignore t                          :which-key "Windows")
      "w"   (general-simulate-key "C-w") ; window command
      ;; Buffers TODO make hydra
      "b"  '(:ignore t                          :which-key "Buffers")
      "bs" '(evil-write                         :which-key "write file")
      "bd" '(evil-delete-buffer                 :which-key "delete buffer")
      "bl" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer")
      "bS" '(evil-write-all                     :which-key "write all buffers"))
    :config
    (define-key evil-window-map "d" 'evil-quit) ; delete window
    (define-key evil-window-map "q" 'evil-save-modified-and-close)) ; quit and save window
#+END_SRC
* Evil-Related
#+BEGIN_SRC emacs-lisp :results none
  ;; Evil everywhere
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; 2 character searches with s (ala vim-sneak)
  (use-package evil-snipe
    :after evil
    :diminish evil-snipe-local-mode
    :hook ((prog-mode text-mode) . evil-snipe-mode)
    :custom
    (evil-snipe-smart-case t))

  ;; s as an operator for surrounding
  (use-package evil-surround
    :after evil
    :diminish
    :hook ((prog-mode text-mode) . evil-surround-mode))

  ;; gc as an operator to comment
  (use-package evil-commentary
    :after evil
    :diminish
    :hook (prog-mode . evil-commentary-mode))

  ;; jk to leave insert mode
  (use-package evil-escape
    :after evil
    :diminish
    :hook ((prog-mode text-mode) . evil-escape-mode)
    :custom
    (evil-escape-key-sequence "jk")
    (evil-escape-delay 0.25)
    (evil-escape-excluded-major-modes '(evil-magit-mode))
    (evil-escape-excluded-states '(normal visual)))

  ;; gl as an operator to left-align, gL to right-align
  (use-package evil-lion
    :after evil
    :diminish
    :hook ((prog-mode text-mode) . evil-lion-mode))

  ;; code folding
  (use-package origami
    :after evil
    :diminish
    :hook (prog-mode . origami-mode)
    :general
    (general-nmap
      "zm" 'origami-close-node-recursively
      "zr" 'origami-open-node-recursively
      "zM" 'origami-close-all-nodes
      "zR" 'origami-open-all-nodes
      "zj" 'origami-next-fold
      "zk" 'origami-previous-fold))

  ;; increment/decrement numbers
  (use-package evil-numbers
    :after evil
    :general
    (my-localleader-def
      "n"  '(:ignore t              :which-key "Evil-Numbers")
      "nu" '(evil-numbers/inc-at-pt :which-key "increment")
      "nd" '(evil-numbers/dec-at-pt :which-key "decrement")))

  ;; multiple cursors
  (use-package evil-mc
    :diminish
    :hook ((prog-mode text-mode) . evil-mc-mode))

  ;; exchange text selected with omap gx
  (use-package evil-exchange
    :after evil
    :hook ((prog-mode text-mode) . evil-exchange-install))

  ;; navigate matching blocks of code with %
  (use-package evil-matchit
    :after evil
    :hook ((prog-mode text-mode) . evil-matchit-mode))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp :results none
  (use-package flx) ; fuzzy sorting for ivy

  (use-package ivy
    :diminish
    :defer 0.1
    :custom
    (ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
    :config
    (ivy-mode))

  (use-package counsel
    :after ivy
    :diminish
    :general
    (my-leader-def
      "."   '(counsel-find-file      :which-key "find file")
      "SPC" '(ivy-switch-buffer      :which-key "switch buffer")
      "fr"  '(counsel-recentf        :which-key "find recent files")
      "fl"  '(counsel-grep-or-swiper :which-key "swiper")
      "i"   '(counsel-imenu          :which-key "imenu")
      "fg"  '(counsel-git            :which-key "git files")
      "fG"  '(counsel-git-grep       :which-key "git grep")
      "ff"  '(counsel-rg             :which-key "ripgrep"))
    :config
    (counsel-mode))
#+END_SRC
* Vterm
#+BEGIN_SRC emacs-lisp :results none
  (use-package vterm
    :general
    (my-leader-def
      "o"   '(:ignore t          :which-key "Open")
      "ot"  '(vterm              :which-key "open vterm")
      "ovt" '(vterm-other-window :which-key "open vterm in vsplit"))
    :custom
    (vterm-kill-buffer-on-exit t))
#+END_SRC
* Yasnippets
#+BEGIN_SRC emacs-lisp :results none
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook ((prog-mode text-mode) . yas-minor-mode)
    :general
    (my-localleader-def
      "y"  '(:ignore t           :which-key "Yasnippet")
      "yi" '(yas-insert-snippet  :which-key "insert snippet")
      "yl" '(yas-describe-tables :which-key "list snippets"))
    :config
    (use-package yasnippet-snippets))

  (use-package auto-yasnippet
    :after yasnippet
    :general
    (my-localleader-def
      "yc" '(aya-create :which-key "create aya snippet")
      "ye" '(aya-expand :which-key "expand aya snippet")))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp :results none
  (use-package magit
    :custom
    (magit-auto-revert-mode nil)
    (magit-save-repository-buffers nil)
    :general
    (my-leader-def ;; TODO unmap some of these
      "g"   '(:ignore t                  :which-key "Git")
      "gs"  '(magit-status               :which-key "status")
      "gb"  '(magit-branch-checkout      :which-key "checkout branch")
      "gB"  '(magit-blame-addition       :which-key "blame")
      "gc"  '(magit-clone                :which-key "clone")
      "gd"  '(magit-file-delete          :which-key "delete file")
      "gF"  '(magit-fetch                :which-key "fetch")
      "gG"  '(magit-status-here          :which-key "status here")
      "gl"  '(magit-log                  :which-key "log")
      "gS"  '(magit-stage-file           :which-key "stage file")
      "gU"  '(magit-unstage-file         :which-key "unstage file")
      "gn"  '(:ignore t                  :which-key "New")
      "gnb" '(magit-branch-and-checkout  :which-key "branch")
      "gnc" '(magit-commit-create        :which-key "commit")
      "gnf" '(magit-commit-fixup         :which-key "fixup commit")
      "gnd" '(magit-init                 :which-key "init")
      "gf"  '(:ignore t                  :which-key "Find")
      "gfc" '(magit-show-commit          :which-key "show commit")
      "gff" '(magit-find-file            :which-key "file")
      "gfg" '(magit-find-git-config-file :which-key "git config file")
      "gfr" '(magit-list-repositories    :which-key "repository")
      "gfs" '(magit-list-submodules)     :which-key "submodule"))

  (use-package evil-magit
    :after magit
    :custom
    (evil-magit-state 'normal)
    (evil-magit-use-z-for-folds t))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp :results none
  (use-package projectile
    :defer 0.1
    :diminish
    :custom
    (projectile-project-search-path '("~/code/" "~/.emacs.d/"))
    :general
    (my-leader-def
      "p" '(projectile-command-map :which-key "Projectile"))
  :config
  (projectile-mode +1))

  (use-package counsel-projectile
    :after (counsel projectile)
    :diminish
    :config
    (counsel-projectile-mode))
#+END_SRC
* IDE Features
#+BEGIN_SRC emacs-lisp :results none
  ;; autocomplete
  (use-package company ; TODO manual completion only
    :diminish
    :hook (prog-mode . company-mode)
    :custom
    (company-show-numbers t)
    (company-backends '(company-capf
			company-files
			company-keywords
			company-yasnippet))
    :general
    (company-active-map "C-w" nil) ; don't override evil C-w
    (general-imap
      "C-n" 'company-complete))  ; manual completion with C-n

  ;; LSP
  (use-package lsp-mode
    :diminish
    :hook prog-mode
    :general
    (general-nmap "gr" 'lsp-rename))

  (use-package lsp-ui
    :disabled t) ; TODO

  ;; linting
  (use-package flycheck
    :diminish
    :hook (lsp-mode . flycheck-mode)
    :general
    (my-leader-def
      "fe" '(flycheck-list-errors :which-key "list errors"))
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp :results none
  (use-package rainbow-delimiters
    :diminish
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp :results none
  (use-package smartparens
    :diminish
    :hook (prog-mode . smartparens-mode)
    :config
    (defhydra hydra-smartparens ()
      ;; Movement
      ("l" sp-next-sexp "next pair")
      ("h" sp-backward-sexp "previous pair")
      ("j" sp-down-sexp "down")
      ("k" sp-backward-up-sexp "up")

      ("H" sp-beginning-of-sexp "beginning")
      ("L" sp-end-of-sexp "end")
      ("d" sp-delete-sexp "delete")
      ("D" sp-kill-whole-line "delete line")

      ("s" sp-forward-slurp-sexp "slurp")
      ("S" sp-backward-slurp-sexp "backward slurp")
      ("b" sp-forward-barf-sexp "barf")
      ("B" sp-backward-barf-sexp "backward barf")

      ("v" sp-split-sexp "split pair")
      ("u" sp-join-sexp "join pair")

      ("p" sp-add-to-previous-sexp "add to previous pair")
      ("n" sp-add-to-next-sexp "add to next pair"))
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil) ; don't pair ' in elisp mode
    :general
    (my-localleader-def
      "s" '(hydra-smartparens/body :which-key "Smartparens")))

  ;;   ;; Make vim change, delete, etc. commands preserve balance of parentheses
  (use-package evil-smartparens
    :diminish
    :hook ((emacs-lisp-mode) . evil-smartparens-mode))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp :results none
  (use-package org
    :general
    (my-leader-def
      "oa"  '(org-agenda        :which-key "org agenda")
      "n"   '(:ignore t         :which-key "Notes")
      "nls" '(org-store-link    :which-key "store link")
      "nli" '(org-insert-link   :which-key "insert link")
      "nlg" '(org-open-at-point :which-key "visit link")
      "nt"  '(org-todo          :which-key "toggle TODO state")
      "ne"  '(org-ctrl-c-ctrl-c :which-key "evaluate src block")
      "n'"  "C-c '"
      "ns"  '(org-sort          :which-key "org schedule")
      "nS"  '(org-schedule      :which-key "org schedule"))
    :custom
    (org-agenda-files '("~/org"))
    (org-confirm-babel-evaluate nil)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell   . t)
       (haskell . t))))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))

  (use-package evil-org
    :after org
    :diminish
    :hook (org-mode . evil-org-mode))
#+END_SRC
* Windows
#+BEGIN_SRC emacs-lisp :results none
  ;; easily navigate windows with prefix M-o
  (use-package ace-window
    :general
    ("M-o" 'ace-window))

  (use-package golden-ratio
    :diminish
    :custom
    (golden-ratio-auto-scale t)
    :config
    (golden-ratio-mode))
#+END_SRC
* Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
  (use-package restart-emacs
    :general
    (my-leader-def
      "e"  '(:ignore t     :which-key "Emacs Commands")
      "er" '(restart-emacs :which-key "restart emacs"))
    :custom
    (restart-emacs-restore-frames t)) ; Restore frames on restart

  ;; Persistent Undos
  (use-package undo-tree
    :hook ((prog-mode text-mode) . undo-tree-mode)
    :diminish
    :custom
    (undo-limit 10000)
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

  (use-package format-all
    :general
    (my-leader-def
      "=" '(format-all-buffer :which-key "format")))

  (use-package smex)
#+END_SRC
