* Basic Settings
  #+BEGIN_SRC emacs-lisp results: none
    ;;; -*- lexical-binding: t; -*-
    (setq user-full-name "Lance Bergeron"
	  user-mail-address "bergeron.lance6@gmail.com")

    (setq inhibit-startup-screen t
	  inhibit-startup-message t
	  inhibit-startup-echo-area-message user-login-name
	  inhibit-default-init t
	  initial-scratch-message nil
	  initial-major-mode 'fundamental-mode
	  kill-buffer-query-functions nil)

    (fset 'yes-or-no-p 'y-or-n-p)                                 ; y or n prompt, not yes or no

    (menu-bar-display-line-numbers-mode 'visual)                  ; relative line numbers
    (global-display-line-numbers-mode 1)                          ; always show line numbers

    ;; Optimizations
    (setq idle-update-delay 1
	  auto-mode-case-fold nil)

    (setq bidi-inhibit-bpa t)

    (setq-default bidi-display-reordering 'left-to-right
		  bidi-paragraph-direction 'left-to-right
		  cursor-in-non-selected-windows nil)

    (setq fast-but-imprecise-scrolling t
	  frame-inhibit-implied-resize t
	  inhibit-compacting-font-caches t
	  highlight-nonselected-windows nil
	  ffap-machine-p-known 'reject)

    ;; Keeping ~/.emacs.d organized
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
	  custom-file (expand-file-name "custom.el" user-emacs-directory))
    ;; (toggle-frame-fullscreen)
    ;; (menu-bar-mode -1)                                            ; no menu bar
    ;; (toggle-scroll-bar -1)                                        ; no scroll bar
    ;; (tool-bar-mode -1)                                            ; no tool bar
  #+END_SRC
* Keymap Management
  #+BEGIN_SRC emacs-lisp results: none
    (use-package general                  ; unified way to map keybindings; works with :general in use-package
      :config
      (general-create-definer my-leader-def ; prefix key with SPC or C-SPC
	:states '(normal visual insert emacs)
	:prefix "SPC"
	:non-normal-prefix "C-SPC")

      (general-evil-setup)
      (my-leader-def
	"f"  '(:ignore t :which-key "Find")
	"fm" '(general-describe-keybindings :which-key "list keybindings")
	"q"  '(save-buffers-kill-emacs :which-key "save buffers & quit emacs")
	"," '(dired-jump :which-key "open dired")
	"fd" '(dired :which-key "navigate to a directory")))

    (use-package which-key                ; show keybindings following when a prefix is pressed
      :defer 0.1
      :config
      (setq which-key-sort-order #'which-key-prefix-then-key-order
	    which-key-min-display-lines 6
	    which-key-add-column-padding 1
	    which-key-sort-uppercase-first nil)
      (which-key-mode))

    (use-package hydra)
  #+END_SRC
* Evil Mode
  #+BEGIN_SRC emacs-lisp results: none
    (use-package evil
      :demand t
      :hook (after-init . evil-mode)
      :init
      (setq evil-want-C-u-scroll t
	    evil-want-Y-yank-to-eol t
	    evil-split-window-below t
	    evil-vsplit-window-right t
	    evil-search-wrap t
	    evil-want-keybinding nil)
      :general
      (evil-ex-completion-map ";" 'exit-minibuffer) ; use ; to complete : vim commands
      ('(normal visual motion)
       ";" 'evil-ex ; switch ; and :
       ":" 'evil-repeat-find-char
       "H" "^"
       "L" "$")
      (general-nmap
	;; Vim-like Macros
	"SPC =" "mzgg=G`z"
	;; Remaps
	"gm" 'evil-execute-macro ; run vim macros
	"]b" '(evil-next-buffer :which-key "next buffer")
	"[b" '(evil-prev-buffer :which-key "previous buffer"))
      (my-leader-def
	"h" (general-simulate-key "C-h" :which-key "Help")
	;; Windows
	";"  '(shell-command :which-key "shell command")
	"w"  '(:ignore t :which-key "Windows")
	"w" (general-simulate-key "C-w") ; window command
	;; Buffers TODO make hydra
	"b"  '(:ignore t :which-key "Buffers")
	"bs" '(evil-write :which-key "write file")
	"bd" '(evil-delete-buffer :which-key "delete buffer")
	"bl" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer")
	"bS" '(evil-write-all :which-key "write all buffers"))
      :config
      (define-key evil-window-map "d" 'evil-quit) ; delete window
      (define-key evil-window-map "q" 'evil-save-modified-and-close)) ; quit and save window
  #+END_SRC
* Evil-Related
  #+BEGIN_SRC emacs-lisp results: none
    ;; Evil everywhere
    (use-package evil-collection
      :config
      (evil-collection-init))

    ;; 2 character searches with s (ala vim-sneak)
    (use-package evil-snipe
      :hook ((prog-mode text-mode) . evil-snipe-local-mode)
      :init
      (setq evil-snipe-smart-case t))

    ;; s as an operator for surrounding
    (use-package evil-surround
      :hook ((prog-mode text-mode) . evil-surround-mode))

    ;; gc as an operator to comment
    (use-package evil-commentary
      :hook (prog-mode . evil-commentary-mode))

    ;; jk to leave insert mode
    (use-package evil-escape
      :hook ((prog-mode text-mode) . evil-escape-mode)
      :config
      (setq evil-escape-key-sequence "jk"
	    evil-escape-delay 0.25)
      (setq evil-escape-excluded-major-modes '(evil-magit-mode))
      (push 'normal evil-escape-excluded-states)
      (push 'visual evil-escape-excluded-states))

    ;; gl as an operator to left-align, gL to right-align
    (use-package evil-lion
      :hook ((prog-mode text-mode) . evil-lion-mode))

    ;; z - prefixed folding options like vim
    (use-package vimish-fold
      :hook ((prog-mode text-mode) . vimish-fold-mode))

    (use-package evil-numbers
      :general
      (my-leader-def
	"en" '(:ignore t :which-key "Evil-Numbers")
	"enu" '(evil-numbers/inc-at-pt :which-key "increment")
	"end" '(evil-numbers/dec-at-pt :which-key "decrement")))

    (use-package evil-exchange
      :hook ((prog-mode text-mode) . evil-exchange-install))
  #+END_SRC
* Ivy
  #+BEGIN_SRC emacs-lisp results: none
    (use-package flx)

    (use-package ivy
      :defer 0.1
      :config
      (ivy-mode)
      ;; (setq ivy-initial-inputs-alist nil)
      (setq ivy-re-builders-alist
	    '((t . ivy--regex-fuzzy))))

    (use-package counsel
      :after ivy
      :general
      (my-leader-def
	"."   '(counsel-find-file :which-key "find file")
	"SPC" '(ivy-switch-buffer :which-key "switch buffer")
	"fr"  '(counsel-recentf :which-key "find recent files")
	"fl"  '(counsel-grep-or-swiper :which-key "swiper")
	"fg"  '(counsel-git-grep :which-key "git files")
	"ff"  '(counsel-rg :which-key "ripgrep"))
      :config
      (counsel-mode))

    (use-package counsel-projectile
      :defer 0.1
      :general
      (my-leader-def
	"pp" '(counsel-projectile-switch-project :which-key "switch project")
	"pb" '(counsel-projectile-switch-to-buffer :which-key "switch buffer")))
  #+END_SRC
* Vterm
  #+BEGIN_SRC emacs-lisp results: none
    (use-package vterm ;; TODO switch to term
      :general
      (my-leader-def
	"o"   '(:ignore t :which-key "Open")
	"ot"  '(vterm :which-key "open vterm")
	"ovt" '(vterm-other-window :which-key "open vterm in vsplit"))
      :config
      (setq vterm-kill-buffer-on-exit t))
  #+END_SRC
* Yasnippets
  #+BEGIN_SRC emacs-lisp results: none
    (use-package yasnippet
      :hook ((prog-mode text-mode) . yas-minor-mode)
      :general
      (my-leader-def
	"y"  '(:ignore t :which-key "Yasnippet")
	"yi" '(yas-insert-snippet :which-key "insert snippet")
	"yl" '(yas-describe-tables :which-key "list snippets"))
      :config
      (use-package yasnippet-snippets))

    (use-package auto-yasnippet
      :general
      (my-leader-def
	"yc" '(aya-create :which-key "create aya snippet")
	"ye" '(aya-expand :which-key "expand aya snippet")))
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp results: none
    (use-package magit
      :init
      (setq magit-auto-revert-mode nil)
      :general
      (my-leader-def
	"g"   '(:ignore t :which-key "Magit")
	"gs"  '(magit-status :which-key "status")
	"gb"  '(magit-branch-checkout :which-key "checkout branch")
	"gB"  '(magit-blame-addition :which-key "blame")
	"gc"  '(magit-clone :which-key "clone")
	"gd"  '(magit-file-delete :which-key "delete file")
	"gF"  '(magit-fetch :which-key "fetch")
	"gG"  '(magit-status-here :which-key "status here")
	"gl"  '(magit-log :which-key "log")
	"gS"  '(magit-stage-file :which-key "stage file")
	"gU"  '(magit-unstage-file :which-key "unstage file")
	"gn"  '(:ignore t :which-key "New")
	"gnb" '(magit-branch-and-checkout :which-key "branch")
	"gnc" '(magit-commit-create :which-key "commit")
	"gnf" '(magit-commit-fixup :which-key "fixup commit")
	"gnd" '(magit-init :which-key "init")
	"gf"  '(:ignore t :which-key "Find")
	"gfc" '(magit-show-commit :which-key "show commit")
	"gff" '(magit-find-file :which-key "file")
	"gfg" '(magit-find-git-config-file :which-key "git config file")
	"gfr" '(magit-list-repositories :which-key "repository")
	"gfs" '(magit-list-submodules) :which-key "submodule")
      :config
	(setq magit-save-repository-buffers nil)) ; don't prompt to save buffers on magit-status

    (use-package evil-magit
      :after magit
      :init
      (setq evil-magit-state 'normal
	    evil-magit-use-z-for-folds t))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp results: none
    (use-package projectile
      :defer 0.1
      :general
      (my-leader-def
	"p"  '(:ignore t :which-key "Projects")
	"pf" '(projectile-find-file :which-key "find file")
	"pF" '(projectile-find-other-file :which-key "find other file")
	"pd" '(projectile-remove-known-project :which-key "remove project")
	"pa" '(projectile-add-known-project :which-key "add project")
	"pc" '(projectile-compile-project :which-key "compile project")
	"pk" '(projectile-kill-buffers :which-key "kill project buffers")
	"pr" '(projectile-recentf :which-key "find recent project")
	"ps" '(projectile-save-project-buffers :which-key "save project buffer"))
      :config
      (projectile-mode +1))
  #+END_SRC
* Avy
  #+BEGIN_SRC emacs-lisp results: none
    (use-package avy
      :general
      (my-leader-def
	"fc" '(avy-goto-char :which-key "char")
	"fC" '(avy-goto-char-2 :which-key "2-chars")
	"fL" '(avy-goto-line :which-key "line")))
  #+END_SRC
* IDE Features
  #+BEGIN_SRC emacs-lisp results: none
    ;; Autocomplete
    (use-package company
      :hook (prog-mode . company-mode)
      :general
      (company-active-map "C-w" nil) ; don't override evil C-w
      (general-imap
	"C-n" 'company-complete))  ; manual completion with C-n

    ;; LSP
    (use-package lsp-mode
      :hook (prog-mode . lsp-mode)
      :general
      (general-nmap "gr" 'lsp-rename))

    ;; Linting
    (use-package flycheck
      :hook (lsp-mode . flycheck-mode)
      :general
      (my-leader-def
	"fe" '(flycheck-list-errors :which-key "list errors"))
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+END_SRC
* UI
  #+BEGIN_SRC emacs-lisp results: none
    ;; Color parentheses
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  #+END_SRC
* Smartparens
  #+BEGIN_SRC emacs-lisp results: none
    (use-package smartparens
      :hook (prog-mode . smartparens-mode)
      ;;   "m" '(:ignore t :which-key "Move")
      ;;   "mp" '(:ignore t :which-key "Pair")
      ;;   "mpl" '(sp-forward-slurp-sexp :which-key "forward slurp")
      ;;   "mph" '(sp-backward-slurp-sexp :which-key "backward slurp")
      ;;   "mpL" '(sp-forward-barf-sexp :which-key "forward barf")
      ;;   "mpH" '(sp-backward-barf-sexp :which-key "backward barf")
      ;;   "mps" '(sp-split-sexp "split pair")
      ;;   "mpj" '(sp-join-sexp "join pair")
      ;;   "mpa" '(:ignore t :which-key "Add")
      ;;   "mpah" '(sp-add-to-previous-sexp "to previous pair")
      ;;   "mpal" '(sp-add-to-next-sexp "to next pair"))
      ;; "mpd" '(sp-kill-whole-line :which-key "delete line"))
      :config
      (defhydra hydra-smartparens ()
	;; Movement
	;; ("q" nil)
	("l" sp-next-sexp "next pair")
	("h" sp-backward-sexp "previous pair")
	("j" sp-down-sexp "down")
	("k" sp-backward-up-sexp "up")

	("H" sp-beginning-of-sexp "beginning")
	("L" sp-end-of-sexp "end")
	("d" sp-delete-sexp "delete")

	("s" sp-forward-slurp-sexp "slurp")
	("S" sp-backward-slurp-sexp "backward slurp")
	("b" sp-forward-barf-sexp "barf")
	("B" sp-backward-barf-sexp "backward barf"))
      (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil) ; don't pair ' in elisp mode
      :general
      (my-leader-def
	"s" '(hydra-smartparens/body :which-key "Smartparens")))

    ;;   ;; Make vim change, delete, etc. commands preserve balance of parentheses
    (use-package evil-smartparens
      :hook ((smartparens-mode) . evil-smartparens-mode))
  #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp results: none
    (use-package org
      :general
      (my-leader-def
	"oa"  '(org-agenda :which-key "org agenda")
	"n"   '(:ignore t :which-key "Notes")
	"nls" '(org-store-link :which-key "store link")
	"nli" '(org-insert-link :which-key "insert link")
	"nlg" '(org-open-at-point :which-key "visit link")
	"nt"  '(org-todo :which-key "toggle TODO state")
	"ne"  '(org-ctrl-c-ctrl-c :which-key "evaluate src block")
	"n'"  "C-c '"
	"ns"  '(org-schedule :which-key "org schedule"))
      :config
      (setq org-agenda-files '("~/org")
	    org-confirm-babel-evaluate nil)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((shell     . t)
	 (emacs-lisp . t)
	 (haskell    . t))))

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode))
  #+END_SRC
* Miscellaneous
  #+BEGIN_SRC emacs-lisp results: none
    (use-package restart-emacs
      :general
      (my-leader-def
	"e"  '(:ignore t :which-key "Emacs Commands")
	"er" '(restart-emacs :which-key "restart emacs"))
      :config
      (setq restart-emacs-restore-frames t)) ; Restore frames on restart

    ;; Persistent Undos
    (use-package undo-tree
      :hook ((prog-mode text-mode) . undo-tree-mode)
      :init
      (setq undo-limit 10000
	    undo-tree-auto-save-history t)
      :config
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
  #+END_SRC
  
