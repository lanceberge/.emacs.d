* Table of Contents                                                   :TOC:
- [[#early-init][Early-Init]]
  - [[#initial-settings][Initial Settings]]
  - [[#straight][Straight]]
  - [[#ui][UI]]
- [[#init][Init]]
- [[#initial][Initial]]
  - [[#settings][Settings]]
  - [[#os-specific][OS Specific]]
  - [[#defer-incrementally][Defer Incrementally]]
  - [[#keymappackage-management][Keymap/Package Management]]
  - [[#built-in-packages][Built-in Packages]]
  - [[#keybindings][Keybindings]]
  - [[#hooks][Hooks]]
  - [[#functions][Functions]]
- [[#evil-mode][Evil Mode]]
  - [[#evil][Evil]]
  - [[#evil-collection][Evil-Collection]]
  - [[#extra-operatorsmotion][Extra operators/motion]]
  - [[#miscellaneous][Miscellaneous]]
- [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#yasnippet][Yasnippet]]
  - [[#company][Company]]
- [[#version-control][Version Control]]
- [[#project-management][Project Management]]
- [[#lsp-related][LSP-Related]]
- [[#ui-1][UI]]
- [[#org][Org]]
  - [[#org-1][Org]]
  - [[#org-built-ins][Org built-ins]]
  - [[#non-built-ins][Non built-ins]]
  - [[#functions-1][Functions]]
- [[#windows-buffers-tabs][Windows, Buffers, Tabs]]
  - [[#windows][Windows]]
  - [[#tabs][Tabs]]
- [[#editing][Editing]]
  - [[#smartparens][Smartparens]]
  - [[#miscellaneous-1][Miscellaneous]]
- [[#system][System]]
  - [[#vterm][Vterm]]
  - [[#eshell][Eshell]]
  - [[#tramp][Tramp]]
  - [[#dired][Dired]]
  - [[#miscellaneous-2][Miscellaneous]]
  - [[#functions-2][Functions]]
- [[#filetype-specific][Filetype Specific]]
  - [[#pdf][PDF]]
  - [[#c-family][C family]]
  - [[#statistics-r][Statistics (R)]]
  - [[#markdown][Markdown]]
  - [[#rust][Rust]]

* Early-Init

Tangles to early-init.el

** Initial Settings
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/early-init.el
;;; -*- lexical-binding: t -*-
;; increase GC threshold until startup (in Initial section under hooks)
(setq gc-cons-threshold most-positive-fixnum)

(defconst IS-LINUX (eq system-type 'gnu/linux)
  "Are we currently on a Linux OS")
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos))
  "Are we currently on a windows OS")

(setq package-enable-at-startup nil) ; disable package.el at startup
(advice-add #'package--ensure-init-file :override #'ignore)

;; No unnecessary noise: toolbar, menu-bar, and scroll-bar
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq emacs-load-start-time (current-time)
      menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil
      frame-inhibit-implied-resize t
      inhibit-default-init t
      site-run-file nil)

(set-face-attribute 'default nil ; font
                    :family "DejaVu Sans Mono"
                    :height 110
                    :weight 'normal
                    :width 'normal)

(advice-add #'x-apply-session-resources :override #'ignore)
#+END_SRC
** Straight
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/early-init.el
;; Bootstrap straight.el - my package manager
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; use-package uses straight.el
(setq straight-use-package-by-default t
      straight-repository-branch "develop"
      straight-check-for-modifications nil
      straight-vc-git-default-clone-depth 1
      straight-fix-org nil
      comp-deferred-compilation t) ; defer elisp compilation, great with native-comp branch

(straight-use-package 'use-package)
(setq use-package-verbose t) ; show which packages are being loaded on startup and when
#+END_SRC
** UI
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/early-init.el
(defconst bg-color "#282828"
  "gruvbox background color")

(use-package gruvbox-theme ; theme
  :config
  (load-theme 'gruvbox t))

(use-package display-line-numbers ; line numbers
  :straight (:type built-in)
  :custom
  (display-line-numbers-width-start t)
  :config
  (custom-set-faces `(line-number ((t (:background ,bg-color))))
                    `(line-number-current-line ((t (:background ,bg-color)))))
  (global-display-line-numbers-mode)
  (when IS-LINUX
    (setq-default display-line-numbers-type 'visual))) ; relative line numbers

;; Minimalistic mode-line
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                mode-line-mule-info
                mode-line-client-mode
                mode-line-modified
                mode-line-remote
                mode-line-frame-indentifcation
                " "
                mode-line-buffer-identification
                "  "
                vc-mode
                " "
                mode-line-modes
                " "
                mode-line-misc-info
                mode-line-end-spaces))

;; Mode-line faces
(custom-set-faces `(mode-line           ((t (:background ,bg-color :foreground "#928374"))))
                  `(mode-line-inactive  ((t (:background ,bg-color))))
                  `(mode-line-buffer-id ((t (:bold t)))))

(set-face-foreground 'vertical-border bg-color)
#+END_SRC
* Init

Tangles to init.el

Loads the file config.el on startup. Every time I exit emacs (if org has been loaded), this file tangles to config.el (defined in [[*Org][Org]] under kill-emacs-hook). If the file doesn't exist, org is loaded and the file is tangled.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :results none
;;; -*- lexical-binding: t -*-
(defconst config-org (expand-file-name "README.org" user-emacs-directory)
  "org-mode config to tangle into config.el")

(defconst config-el  (expand-file-name "config.el" user-emacs-directory)
  "emacs-lisp tangled config file")

(unless (file-exists-p config-el) ; tangle config-org to config-el
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el) ; load tangled config file
#+END_SRC
* Initial

The rest of this file tangles to config.el

** Settings

Mostly taken from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;;; -*- lexical-binding: t -*-
(use-package emacs
  :custom
  ;; unset file-name-handler-alist until its set again in Hooks heading (improve startup time)
  (default-file-name-handler-alist file-name-handler-alist)
  (file-name-handler-alist nil)

  ;; raise garbage collection threshold until its set again in Hooks heading
  (gc-cons-threshold most-positive-fixnum)
  (gc-cons-percentage 0.6)

  (load-prefer-newer noninteractive)
  (locale-coding-system 'utf-8)
  (message-log-max 5000) ; longer number of max messages
  (ring-bell-function 'ignore)

  ;; startup.el settings
  (inhibit-startup-screen t)
  (inhibit-startup-message t)
  (inhibit-startup-echo-area-message user-login-name)

  ;; inhibit-default-init t
  (initial-scratch-message nil)          ; empty scratch file
  (initial-major-mode 'fundamental-mode) ; start in an empty mode
  (user-mail-address "bergeron.lance6@gmail.com")

  (kill-buffer-query-functions nil)
  (inhibit-compacting-font-caches t) ; inhibit font compacting
  (highlight-nonselected-windows nil)
  (ffap-machine-p-known 'reject)     ; don't ping things that look like domain names
  (bidi-inhibit-bpa t)
  (fast-but-imprecise-scrolling t)   ; faster scrolling over unfontified regions

  ;; User Settings
  (user-full-name "Lance Bergeron")

  ;; Scrolling
  (scroll-conservatively 1000)
  (scroll-margin 4)
  (scroll-step 1)

  ;; General
  (indent-tabs-mode nil) ; tabs are converted to spaces
  (apropos-do-all t)     ; more extensive apropos searches

  ;; Disable bidirectional text rendering for performance
  (bidi-display-reordering 'left-to-right)
  (bidi-paragraph-direction 'left-to-right)
  (cursor-in-non-selected-windows nil)

  ;; Keeping ~/.emacs.d clean
  (my/etc-dir                  (expand-file-name "etc/" user-emacs-directory))
  (custom-file                 (expand-file-name "custom.el" my/etc-dir))
  (custom-theme-directory      (expand-file-name "themes/" my/etc-dir))
  (url-configuration-directory (expand-file-name "url/" my/etc-dir))
  (url-cache-directory         (expand-file-name "url/" my/etc-dir))
  (persist--directory-location (expand-file-name "persist/" my/etc-dir))
  (transient-history-file      (expand-file-name "transient/history.el" my/etc-dir))
  (auto-save-list-file-prefix  (expand-file-name "auto-save/sessions" my/etc-dir)))

(advice-add #'tty-run-terminal-initialization :override #'ignore)

;; Get rid of For information about GNU Emacs message
(advice-add #'display-startup-echo-area-message :override #'ignore)

(fset 'yes-or-no-p 'y-or-n-p) ; y or n prompt, not yes or no
#+END_SRC
** OS Specific

Optimizations for different file types from Doom emacs

#+BEGIN_SRC emacs-lisp :results none
(unless IS-WINDOWS
  (setq selection-coding-system 'utf-8))

(when IS-WINDOWS
  (setq w32-get-true-file-attributes nil
        w32-pipe-read-delay 0
        w32-pipe-buffer-size (* 64 1024)
        w32-lwindow-modifier 'super
        w32-rwindow-modifier 'super
        abbreviated-home-dir "\\ `'"))

(when (and IS-WINDOWS (null (getenv "HOME")))
  (setenv "HOME" (getenv "USERPROFILE")))

(unless IS-LINUX
  (setq command-line-x-option-alist nil))

(when IS-LINUX
  (setq x-gtk-use-system-tooltips nil))
#+END_SRC
** Defer Incrementally

Use :defer-incrementally with packages with a lot of dependencies to incrementally load them in idle time

Taken entirely from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;; https://github.com/hlissner/doom-emacs/blob/42a21dffddeee57d84e82a9f0b65d1b0cba2b2af/core/core.el#L353
(defvar doom-incremental-packages '(t)
  "A list of packages to load incrementally after startup. Any large packages
    here may cause noticeable pauses, so it's recommended you break them up into
    sub-packages. For example, `org' is comprised of many packages, and can be
    broken up into:
      (doom-load-packages-incrementally
       '(calendar find-func format-spec org-macs org-compat
         org-faces org-entities org-list org-pcomplete org-src
         org-footnote org-macro ob org org-clock org-agenda
         org-capture))
    This is already done by the lang/org module, however.
    If you want to disable incremental loading altogether, either remove
    `doom-load-packages-incrementally-h' from `emacs-startup-hook' or set
    `doom-incremental-first-idle-timer' to nil.")

(defvar doom-incremental-first-idle-timer 2.0
  "How long (in idle seconds) until incremental loading starts.
    Set this to nil to disable incremental loading.")

(defvar doom-incremental-idle-timer 0.75
  "How long (in idle seconds) in between incrementally loading packages.")

(defvar doom-incremental-load-immediately nil
  ;; (daemonp)
  "If non-nil, load all incrementally deferred packages immediately at startup.")

(defmacro appendq! (sym &rest lists)
  "Append LISTS to SYM in place."
  `(setq ,sym (append ,sym ,@lists)))

(defun doom-load-packages-incrementally (packages &optional now)
  "Registers PACKAGES to be loaded incrementally.
    If NOW is non-nil, load PACKAGES incrementally, in `doom-incremental-idle-timer'
    intervals."
  (if (not now)
      (appendq! doom-incremental-packages packages)
    (while packages
      (let ((req (pop packages)))
        (unless (featurep req)
          (message "Incrementally loading %s" req)
          (condition-case e
              (or (while-no-input
                    ;; If `default-directory' is a directory that doesn't exist
                    ;; or is unreadable, Emacs throws up file-missing errors, so
                    ;; we set it to a directory we know exists and is readable.
                    (let ((default-directory user-emacs-directory)
                          (gc-cons-threshold most-positive-fixnum)
                          file-name-handler-alist)
                      (require req nil t))
                    t)
                  (push req packages))
            ((error debug)
             (message "Failed to load '%s' package incrementally, because: %s"
                      req e)))
          (if (not packages)
              (message "Finished incremental loading")
            (run-with-idle-timer doom-incremental-idle-timer
                                 nil #'doom-load-packages-incrementally
                                 packages t)
            (setq packages nil)))))))

(defun doom-load-packages-incrementally-h ()
  "Begin incrementally loading packages in `doom-incremental-packages'.
    If this is a daemon session, load them all immediately instead."
  (if doom-incremental-load-immediately
      (mapc #'require (cdr doom-incremental-packages))
    (when (numberp doom-incremental-first-idle-timer)
      (run-with-idle-timer doom-incremental-first-idle-timer
                           nil #'doom-load-packages-incrementally
                           (cdr doom-incremental-packages) t))))

(add-hook 'emacs-startup-hook #'doom-load-packages-incrementally-h)

;; Adds two keywords to `use-package' to expand its lazy-loading capabilities:
;;
;;   :after-call SYMBOL|LIST
;;   :defer-incrementally SYMBOL|LIST|t
;;
;; Check out `use-package!'s documentation for more about these two.
(eval-when-compile
  (dolist (keyword '(:defer-incrementally :after-call))
    (push keyword use-package-deferring-keywords)
    (setq use-package-keywords
          (use-package-list-insert keyword use-package-keywords :after)))

  (defalias 'use-package-normalize/:defer-incrementally #'use-package-normalize-symlist)
  (defun use-package-handler/:defer-incrementally (name _keyword targets rest state)
    (use-package-concat
     `((doom-load-packages-incrementally
        ',(if (equal targets '(t))
              (list name)
            (append targets (list name)))))
     (use-package-process-keywords name rest state))))
#+END_SRC
** Keymap/Package Management
#+BEGIN_SRC emacs-lisp :results none
(use-package general ; unified way to map keybindings; works with :general in use-package
  :demand t
  :config
  (general-create-definer my-leader-def ; SPC prefixed bindings
    :states '(normal visual motion insert emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-create-definer my-localleader-def ; , prefixed bindings
    :states '(normal visual motion insert emacs)
    :keymaps 'override
    :prefix ","
    :non-normal-prefix "C-,")

  (my-leader-def
    "f"   '(:ignore t                    :which-key "Find")
    "fm" #'(general-describe-keybindings :which-key "list keybindings")))

(use-package minions ; hide all minor modes in modeline
  :custom
  (minions-mode-line-lighter "")
  (minions-mode-line-delimiters '(" " . ""))
  :config
  (minions-mode 1))

(use-package which-key ; show keybindings following when a prefix is pressed
  :hook (pre-command . which-key-mode)
  :defer 0.1
  :custom
  (which-key-sort-order #'which-key-prefix-then-key-order)
  (which-key-min-display-lines 6)
  (which-key-add-column-padding 1)
  (which-key-sort-uppercase-first nil)
  :general
  (my-leader-def
    "f SPC m" #'(which-key-show-top-level :which-key "keybinding")))

(use-package hydra
  :defer t)

(use-package use-package-ensure-system-package ; a way to manage dependencies within use-package
  :defer t)

(use-package straight
  :general
  (my-localleader-def
    "s"   '(:ignore t            :which-key "Straight")
    "sr" #'(straight-rebuild-all :which-key "rebuild all")
    "sf" #'(straight-fetch-all   :which-key "fetch all")
    "sp" #'(straight-pull-all    :which-key "pull all")))

(use-package straight-x
  :straight straight
  :general
  (my-localleader-def
    "sc" #'(straight-x-clean-unused-repos :which-key "clean unused")))
#+END_SRC
** Built-in Packages
#+BEGIN_SRC emacs-lisp :results none
(use-package simple
  :straight (:type built-in)
  :defer t
  :custom
  (idle-update-delay 1.0) ; slow down how often emacs updates its ui
  (kill-do-not-save-duplicates t) ; no duplicates in kill ring
  :config
  (global-visual-line-mode 1)) ; makes wrapped lines easlier to work with

(use-package advice
  :straight (:type built-in)
  :defer t
  :custom (ad-redefinition-action 'accept)) ; disable warnings from legacy advice system

(use-package files
  :straight (:type built-in)
  :defer t
  :custom
  (make-backup-files nil)
  (create-lockfiles nil)
  (auto-mode-case-fold nil)
  (auto-save-default nil))

(use-package saveplace ; save location in files
  :straight (:type built-in)
  :hook (pre-command . save-place-mode)
  :custom
  (save-place-file (expand-file-name "places" my/etc-dir)))

(use-package whitespace
  :straight (:type built-in)
  :hook (before-save . whitespace-cleanup)) ; clean unnecessary whitespace before save

(use-package eldoc
  :straight (:type built-in)
  :defer t)

(use-package savehist ; save command history
  :straight (:type built-in)
  :hook (pre-command . savehist-mode)
  :custom
  (savehist-file (expand-file-name "savehist" my/etc-dir))
  (history-length 500)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t))

(use-package recentf
  :straight (:type built-in)
  :defer-incrementally (easymenu tree-widget timer)
  :defer t
  :custom
  (recentf-auto-cleanup 'never)
  (recentf-save-file (expand-file-name "recentf" my/etc-dir))
  (recentf-max-saved-items 200))

(when IS-LINUX
  (use-package flyspell ; spellcheck
    :ensure-system-package ispell
    :straight (:type built-in)
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))
    :general
    ('(normal insert)
     "M-f" #'(flyspell-auto-correct-word :which-key "fix word"))))

(use-package eldoc
  :straight (:type built-in)
  :defer t)

(use-package bookmark
  :straight (:type built-in)
  :defer t
  :custom
  (bookmark-default-file (expand-file-name "bookarks" my/etc-dir)))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp :results none
(use-package emacs ; initial keybindings of built-in functions
  :general
  (my-localleader-def
    "c" (general-simulate-key "C-c" :which-key "+Mode specific maps"))

  (my-leader-def
    "h"         (general-simulate-key "C-h"   :which-key "+Help")

    ;; Windows
    ";"       #'(shell-command                :which-key "shell command")
    "w"         (general-simulate-key "C-w"   :which-key "+Windows") ; window command

    ;; Buffers
    "b"        '(:ignore t                    :which-key "Buffers")
    "bs"      #'(save-buffer                  :which-key "write file")
    "bd"      #'(kill-this-buffer             :which-key "delete buffer")
    "bq"      #'(my/save-and-kill-buffer      :which-key "save and kill buffer")
    "b SPC d" #'(my/kill-window-and-buffer    :which-key "kill window and buffer")
    "br"        (lambda () (interactive)
                  (revert-buffer t t)         :which-key "rever-buffer")

    ;; Eval elisp
    "er"      #'(eval-region                  :which-key "execute elisp region")
    "es"      #'(eval-last-sexp               :which-key "execute elisp sexp")
    "ee"      #'(eval-expression              :which-key "evaluate elisp expression")
    "eb"      #'(eval-buffer                  :which-key "evaluate elisp buffer")
    "ef"      #'(eval-defun                   :which-key "evaluate elisp defun")
    "'"         (general-simulate-key "C-c '" :which-key "open src block"))

  ('normal
   "gs" #'(my/split-line-below :which-key "split line below")
   "gS" #'(my/split-line-above :which-key "split line above")
   "]b" #'(next-buffer         :which-key "next buffer")
   "[b" #'(previous-buffer     :which-key "previous buffer"))


  ('(normal insert)
   :prefix "C-c"
   "SPC" (general-simulate-key "C-c C-c"))

  ('insert
   "C-y" #'yank ; otherwise is overridden by evil
   "C-e" #'end-of-line
   "C-a" #'beginning-of-line))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'after-init-hook ; show startup time
          (lambda ()
            "show the startup time"
            (when (require 'time-date nil t)
              (message "Emacs init time: %.2f seconds."
                       (time-to-seconds (time-since emacs-load-start-time))))))

(add-hook 'emacs-startup-hook ; reset garbage collection settings and file-name-handler-alist
          (lambda ()
            "raise the garbage collection threshold to defer garbage collection
               and unset file-name-handler-alist"
            (setq gc-cons-threshold 16777216
                  gc-cons-percentage 0.1
                  file-name-handler-alist default-file-name-handler-alist)))

;; Raise gc threshold while minibuffer is active to not slow down ivy
(defun doom-defer-garbage-collection-h ()
  "Defer garbage collection by setting it to the largest possible number"
  (setq gc-cons-threshold most-positive-fixnum))

(defun doom-restore-garbage-collection-h ()
  "Restore the garbage collection threshold"
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold 16777216))))

;; decrease garbage collection when using minibuffer
(add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook  #'doom-restore-garbage-collection-h)
#+END_SRC
** Functions
*** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun my/save-and-kill-buffer ()
  "save and kill buffer"
  (interactive)
  (save-buffer)
  (kill-this-buffer))

;;;###autoload
(defun my/split-line-below ()
  "split the line below at point"
  (interactive)
  (newline)
  (indent-according-to-mode))

;;;###autoload
(defun my/split-line-above ()
  "split the line above at point"
  (interactive)
  (my/split-line-below)
  (move-text-up))

;;;###autoload
(defun my/kill-window-and-buffer ()
  "kill window and buffer"
  (interactive)
  (kill-this-buffer)
  (evil-quit))

;;;###autoload
(defun my/append-semicolon()
  "append a semicolon to the end of the line"
  (interactive)
  (save-excursion
    (call-interactively 'move-end-of-line)
    (insert ";")))
#+END_SRC
*** Format

Entirely from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +format--org-region (beg end)
  "Reformat the region within BEG and END.
     If nil, BEG and/or END will default to the boundaries of the src block at point."
  (let ((element (org-element-at-point)))
    (save-excursion
      (let* ((block-beg (save-excursion
                          (goto-char (org-babel-where-is-src-block-head element))
                          (line-beginning-position 2)))
             (block-end (save-excursion
                          (goto-char (org-element-property :end element))
                          (skip-chars-backward " \t\n")
                          (line-beginning-position)))
             (beg (if beg (max beg block-beg) block-beg))
             (end (if end (min end block-end) block-end))
             (lang (org-element-property :language element))
             (major-mode (org-src-get-lang-mode lang)))
        (if (eq major-mode 'org-mode)
            (user-error "Cannot reformat an org src block in org-mode")
          (+format/region beg end))))))

;;;###autoload
(defun +format/buffer ()
  "Reformat the current buffer using LSP or `format-all-buffer'."
  (interactive)
  (if (and (eq major-mode 'org-mode)
           (org-in-src-block-p t))
      (+format--org-region nil nil)
    (call-interactively
     (cond ((and +format-with-lsp
                 (bound-and-true-p lsp-mode)
                 (lsp-feature? "textDocument/formatting"))
            #'lsp-format-buffer)
           (#'format-all-buffer)))))

;;;###autoload
(defun +format/region (beg end)
  "Runs the active formatter on the lines within BEG and END.
   WARNING: this may not work everywhere. It will throw errors if the region
   contains a syntax error in isolation. It is mostly useful for formatting
   snippets or single lines."
  (interactive "rP")
  (if (and (eq major-mode 'org-mode)
           (org-in-src-block-p t))
      (+format--org-region beg end)
    (cond ((and +format-with-lsp
                (bound-and-true-p lsp-mode)
                (lsp-feature? "textDocument/rangeFormatting"))
           (call-interactively #'lsp-format-region))
          ((and +format-with-lsp
                (bound-and-true-p eglot--managed-mode)
                (eglot--server-capable :documentRangeFormattingProvider))
           (call-interactively #'eglot-format))
          ((save-restriction
             (narrow-to-region beg end)
             (let ((+format-region-p t))
               (+format/buffer)))))))
#+END_SRC
* Evil Mode
** Evil
#+BEGIN_SRC emacs-lisp :results none
(use-package evil ; vim bindings in emacs
  :demand t
  :custom
  (evil-want-C-u-scroll t)
  (evil-want-Y-yank-to-eol t)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-search-wrap t)
  (evil-want-keybinding nil)
  (evil-search-module 'evil-search) ; swiper searches swap n and N if this isn't set
  (evil-undo-system 'undo-redo)     ; built in undos with emacs 28
  :general
  ('normal ; navigate wrapped lines like normal lines, works great with relative line numbers
   [remap evil-next-line]     #'evil-next-visual-line
   [remap evil-previous-line] #'evil-previous-visual-line)

  ('evil-window-map
   "SPC h" #'(evil-window-move-far-left    :which-key "move window left")
   "SPC j" #'(evil-window-move-very-bottom :which-key "move window down")
   "SPC k" #'(evil-window-move-very-top    :which-key "move window up")
   "SPC l" #'(evil-window-move-far-right   :which-key "move window right"))

  ('evil-ex-completion-map ";" 'exit-minibuffer) ; use ; to complete : vim commands

  ('normal
   "zr" #'(evil-open-folds  :which-key "open folds recursively")
   "zm" #'(evil-close-folds :which-key "close folds recursively")
   "gm" (general-simulate-key "@@" :which-key "run last macro")) ; last macro

  ('(normal visual motion)
   ";" #'evil-ex ; switch ; and :
   "H" #'evil-first-non-blank
   "L" #'evil-end-of-line)

  (my-leader-def
    "bS" #'(evil-write-all                     :which-key "write all buffers")
    "bl" #'(evil-switch-to-windows-last-buffer :which-key "last buffer"))

  ('evil-window-map
   "d"     #'(evil-quit                    :which-key "delete window")
   "q"     #'(evil-save-modified-and-close :which-key "quit and save window")
   "SPC q" #'(save-buffers-kill-emacs      :which-key "save buffers & quit emacs"))

  ('(normal insert)
   "C-l" #'(evil-ex-nohighlight :which-key "clear highlight"))
  :config
  (evil-mode))
#+END_SRC
** Evil-Collection
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-collection ; evil bindings for many modes
  :defer t
  :custom
  (evil-collection-want-unimpaired-p t)
  (evil-collection-setup-minibuffer t)
  (evil-collection-mode-list
   '(minibuffer
     ivy
     dired
     eshell
     (pdf pdf-tools))))
#+END_SRC
** Extra operators/motion
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-snipe ; 2 character searches with s (ala vim-sneak)
  :hook ((pre-command . evil-snipe-override-mode)
         (pre-command . evil-snipe-mode))
  :custom
  (evil-snipe-show-prompt nil)
  (evil-snipe-skip-leading-whitespace nil)
  :general
  ('motion evil-snipe-override-local-mode-map
           "," nil) ; don't override , prefix
  ('motion
   ":"   #'(evil-snipe-repeat         :which-key "repeat last search")
   "M-," #'(evil-snipe-repeat-reverse :which-key "repeat last search backwards")))

(use-package evil-surround ; s as an operator for surrounding
  :hook (pre-command . evil-surround-mode)
  :config
  ;; use surround with =, *, and _ in org-mode
  (add-hook 'org-mode-hook
            (lambda ()
              (dolist (var '((?\= "=" . "=")
                             (?\* "*" . "*")
                             (?\_ "_" . "_")
                             (?s  "#+BEGIN_SRC" . "#+END_SRC")))
                (add-to-list 'evil-surround-pairs-alist var)))))

(use-package evil-commentary ; gc as an operator to comment
  :hook (find-file . evil-commentary-mode))

(use-package evil-numbers ; increment/decrement numbers w/ vim keys
  :general
  ('normal override
           "C-a" #'(evil-numbers/inc-at-pt :which-key "increment number")
           "C-x" #'(evil-numbers/dec-at-pt :which-key "decrement number")))

(use-package evil-lion ; gl as an operator to left-align, gL to right-align
  :hook ((prog-mode text-mode) . evil-lion-mode))

(use-package evil-matchit ; navigate matching blocks of code with %
  :hook (find-file . evil-matchit-mode)
  :general
  ('motion
   "%" #'(evilmi-jump-items :which-key "jump to matching pair")))

(use-package evil-exchange ; exchange text selected with gx
  :general
  ('(normal visual)
   "gx" #'(evil-exchange        :which-key "exchange operator")
   "gX" #'(evil-exchange-cancel :which-key "cancel exchange")))

(use-package evil-owl
  :hook (find-file . evil-owl-mode))

(use-package evil-textobj-anyblock
  :general
  ('evil-inner-text-objects-map "c" #'(evil-textobj-anyblock-inner-block :which-key "nearest text object"))
  ('evil-outer-text-objects-map "c" #'(evil-textobj-anyblock-a-block     :which-key "nearest text object")))

(use-package evil-args ; argument text object: ex. arg1,ar|g2,arg2 - can delete with daa
  :general
  ('evil-inner-text-objects-map "a" #'(evil-inner-arg :which-key "inner arg"))
  ('evil-outer-text-objects-map "a" #'(evil-outer-arg :which-key "outer arg")))

(use-package evil-indent-plus ; indent level text object
  :general
  ('evil-inner-text-objects-map
   "i" #'(evil-indent-plus-i-indent         :which-key "indent level")
   "I" #'(evil-indent-plus-i-indent-up      :which-key "indent level and up")
   "J" #'(evil-indent-plus-i-indent-up-down :which-key "indent level up and down"))

  ('evil-outer-text-objects-map
   "i" #'(evil-indent-plus-a-indent         :which-key "indent level")
   "I" #'(evil-indent-plus-a-indent-up      :which-key "indent level and up")
   "J" #'(evil-indent-plus-a-indent-up-down :which-key "indent level up and down")))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-escape ; jk to leave insert mode
  :hook (pre-command . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.25)
  (evil-escape-excluded-major-modes '(evil-magit-mode org-agenda-mode))
  (evil-escape-excluded-states '(normal visual emacs)))

(use-package origami ; code folding
  :hook (prog-mode . origami-mode)
  :general
  ('normal origami-mode
           "zc" #'(origami-close-node-recursively :which-key "close fold recursively")
           "zo" #'(origami-open-node-recursively :which-key "open fold recursively")
           "zj" #'(origami-next-fold             :which-key "next fold")
           "zk" #'(origami-previous-fold         :which-key "previous fold")
           "zm" #'(origami-close-all-nodes       :which-key "close all folds recursively")
           "zr" #'(origami-open-all-nodes        :which-key "open all folds recursively")))

(use-package evil-mc ; multiple cursors
  :hook (find-file . evil-mc-mode))
#+END_SRC
* Completion
** Ivy
#+BEGIN_SRC emacs-lisp :results none
(use-package swiper ; ivy for searching through buffers
  :custom
  (swiper-use-visual-line nil)
  (swiper-use-visual-line-p (lambda (a) nil))
  :general
  ('normal
   [remap evil-ex-search-forward]  #'swiper
   [remap evil-ex-search-backward] #'swiper-backward)
  (my-leader-def
    "fb" #'(swiper-multi :which-key "swiper in buffer")
    "fB" #'(swiper-all   :which-key "swiper in all buffers")))

(use-package ivy ; narrowing framework
  :defer 0.1
  :hook (pre-command . ivy-mode)
  :general
  ('(normal insert) ivy-minibuffer-map
   ";"   #'exit-minibuffer
   "C-j" #'ivy-next-line
   "C-k" #'ivy-previous-line)

  ('normal ivy-minibuffer-map
           "q" #'minibuffer-keyboard-quit)

  ('(normal insert) minibuffer-local-mode-map
   ";" #'exit-minibuffer)

  ('(normal insert) minibuffer-inactive-mode-map
   ";" #'exit-minibuffer)
  :custom
  (ivy-initial-inputs-alist nil) ; no initial ^, let flx do all the sorting work
  (ivy-re-builders-alist '((swiper                . ivy--regex-plus)
                           (counsel-rg            . ivy--regex-plus)
                           (counsel-projectile-rg . ivy-regex-plus)
                           (t                     . ivy--regex-fuzzy)))
  :config
  (evil-collection-init 'minibuffer)
  (evil-collection-init 'ivy))

(use-package counsel ; ivy support for many functions
  :ensure-system-package ((rg . ripgrep) fzf)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :general
  (my-leader-def
    "."       #'(counsel-find-file :which-key "file in directory")
    "SPC"     #'(ivy-switch-buffer :which-key "switch buffer")
    "fr"      #'(counsel-recentf   :which-key "find recent files")
    "fj"      #'(counsel-imenu     :which-key "imenu")
    "fg"      #'(counsel-git       :which-key "git files")
    "f SPC g" #'(counsel-git-grep  :which-key "git grep")
    "f SPC f" #'(counsel-file-jump :which-key "file")
    "ff"      #'(counsel-fzf       :which-key "fzf")
    "fi"       '(:ignore t         :which-key "find in directory")
    "fih"       (lambda () (interactive) (counsel-file-jump "" "~"))
    "fis"       (lambda () (interactive) (counsel-file-jump "" "~/school"))
    "fin"       (lambda () (interactive) (counsel-file-jump "" "~/school/notes"))
    "fic"       (lambda () (interactive) (counsel-file-jump "" "~/code"))
    "fio"       (lambda () (interactive) (counsel-file-jump "" "~/org"))
    "fie"       (lambda () (interactive) (counsel-file-jump "" "~/.emacs.d"))
    "fid"       (lambda () (interactive) (counsel-file-jump "" "~/Downloads"))
    "fd"      #'(counsel-dired     :which-key "directory")
    "f SPC r" #'(counsel-rg        :which-key "ripgrep"))

  (my-localleader-def
    "x" #'(counsel-M-x :which-key "M-x"))

  ('(normal insert) org-mode-map
   :prefix "C-c"
   "f"  #'(counsel-org-goto-all :which-key "find org headline"))
  :config
  (counsel-mode))

(use-package amx ; show recently used commands
  :hook (pre-command . amx-mode)
  :custom
  (amx-save-file (expand-file-name "amx-history" my/etc-dir))
  (amx-history-length 50))

(use-package flx
  :after counsel) ; fuzzy sorting for ivy
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp :results none
(use-package yasnippet ; snippets
  ;; Latex-mode snippets in org
  :hook (org-mode . (lambda () (yas-activate-extra-mode 'latex-mode)))
  :defer 0.2
  :defer-incrementally (eldoc easymenu help-mode)
  :general
  (my-leader-def
    "s"   '(:ignore t           :which-key "Yasnippet")
    "si" #'(yas-insert-snippet  :which-key "insert snippet")
    "sn" #'(yas-new-snippet     :which-key "new snippet")
    "sl" #'(yas-describe-tables :which-key "list snippets"))
  :config
  (yas-global-mode))

(use-package yasnippet-snippets ; a bunch of snippets
  :after yasnippet)

(use-package auto-yasnippet ; create small snippets easily
  :general
  (my-leader-def
    "sc" #'(aya-create :which-key "create aya snippet")
    "se" #'(aya-expand :which-key "expand aya snippet")))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp :results none
(use-package company ; autocomplete
  :defer 0.1
  :custom
  (company-idle-delay nil) ; manual completion only
  (company-require-match 'never)
  (company-show-numbers t)
  (company-dabbrev-other-buffers nil)
  (company-dabbrev-ignore-case nil)

  ;; global default for the backend, buffer-local backends will be set based on filetype
  (company-backends '(company-capf
                      company-files
                      company-yasnippet))
  :general
  ('insert company-mode-map
           "C-j" #'company-manual-begin)

  ('company-active-map "C-w" nil ; don't override evil C-w
                       "TAB" nil ; don't use tab to complete - buggy with company-yasnippet
                       "C-j" #'company-select-next-or-abort
                       "C-k" #'company-select-previous-or-abort
                       ";"   #'company-complete-selection) ; choose a completion with ; instead of tab
  :config
  (global-company-mode))

(use-package company-flx ; fuzzy sorting for company completion options with company-capf
  :hook (company-mode . company-flx-mode))
#+END_SRC
* Version Control
#+BEGIN_SRC emacs-lisp :results none
(use-package magit ; git client
  :ensure-system-package git
  :defer-incrementally
  (dash f s with-editor git-commit package eieio lv transient evil-magit)
  :custom
  (magit-auto-revert-mode nil)
  (magit-save-repository-buffers nil)
  :general
  (my-leader-def
    "g"    '(:ignore t                  :which-key "Git")
    "gs"  #'(magit-status               :which-key "status")
    "gb"  #'(magit-branch-checkout      :which-key "checkout branch")
    "gc"  #'(magit-clone                :which-key "clone")
    "gd"  #'(magit-file-delete          :which-key "delete file")
    "gF"  #'(magit-fetch                :which-key "fetch")
    "gn"   '(:ignore t                  :which-key "New")
    "gnb" #'(magit-branch-and-checkout  :which-key "branch")
    "gnf" #'(magit-commit-fixup         :which-key "fixup commit")
    "gi"  #'(magit-init                 :which-key "init")
    "gl"  #'(magit-log                  :which-key "log")
    "gf"   '(:ignore t                  :which-key "Find")
    "gfc" #'(magit-show-commit          :which-key "show commit")
    "gff" #'(magit-find-file            :which-key "file")
    "gfg" #'(magit-find-git-config-file :which-key "git config file")))

(use-package evil-magit ; evil bindings for magit
  :after magit
  :custom
  (evil-magit-state 'normal)
  (evil-magit-use-z-for-folds t))
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp :results none
(use-package projectile ; project management
  :commands projectile-mode
  :custom
  (projectile-project-search-path '("~/code/"))
  (projectile-cache-file (expand-file-name "projectile/cache.el" my/etc-dir))
  (projectile-known-projects-file (expand-file-name "projectile/known-projects.el" my/etc-dir))
  :general
  (my-leader-def
    "p" #'(projectile-command-map :which-key "Projectile")))

(use-package counsel-projectile ; counsel support for projectile functions
  :defer 0.1
  :config
  (counsel-projectile-mode))
#+END_SRC
* LSP-Related
#+BEGIN_SRC emacs-lisp :results none
(use-package lsp-mode ; LSP
  :hook (prog-mode . lsp-mode)
  :custom
  ;; Disable slow features
  (lsp-enable-file-watchers nil)
  (lsp-enable-folding nil)
  (lsp-enable-text-document-color nil)

  ;; Don't modify our code w/o permission
  (lsp-enable-indentation nil)
  (lsp-enable-on-type-formatting nil)
  :general
  (my-localleader-def
    "g"   '(:ignore t  :which-key "Miscellaneous")
    "gr" #'(lsp-rename :which-key "rename with lsp")))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom (lsp-ui-doc-position 'bottom))

(use-package lsp-ivy
  :after (lsp-mode))

(use-package flycheck ; code syntax checking
  :hook (prog-mode . flycheck-mode)
  :custom
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-display-errors-delay 0.25)
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))

  ;; Language specific
  (flycheck-clang-include-path '(".."))
  :general
  ('normal
   "[q" #'(flycheck-previous-error :which-key "previous error")
   "]q" #'(flycheck-next-error :which-key "next error"))

  (my-leader-def
    "fe" #'(flycheck-list-errors :which-key "list errors")))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp :results none
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package highlight-numbers
  :hook (find-file . highlight-numbers-mode))

(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))

(use-package highlight-symbol ; highlight the symbol under point
  :hook (prog-mode . highlight-symbol-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))

(use-package paren ; show matching parentheses
  :straight (:type built-in)
  :hook ((prog-mode text-mode) . show-paren-mode)
  :custom
  (show-paren-when-point-inside-paren t))
#+END_SRC
* Org
** Org
#+BEGIN_SRC emacs-lisp :results none
(use-package org
  :ensure-system-package (latex . texlive-core)
  :straight (:type built-in)
  :hook (kill-emacs . +org/tangle-config)
  :defer-incrementally
  (calendar find-func format-spec org-macs org-compat
            org-faces org-entities org-list org-pcomplete org-src
            org-footnote org-macro ob org org-clock org-agenda
            org-capture evil-org flyspell)
  :custom
  ;; Directories
  (org-id-locations-file (expand-file-name ".org-id-locations" my/etc-dir))
  (org-agenda-files '("~/org"))
  (org-directory "~/org")
  (org-default-notes-file (expand-file-name "notes.org/" org-directory ))

  ;; General settings
  (org-list-allow-alphabetical t)
  (org-startup-folded t)
  (org-fontify-done-headline t)
  (org-M-RET-may-split-line nil)
  (org-log-done 'time)
  (org-tag-alist '(("@school" . ?s) ("@personal" . ?p) ("drill" . ?d) ("TOC" . ?t)))
  (org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p!)"
                                 "WAITING(w!)" "|" "CANCELLED(c@/!)" "DONE(d)")))

  ;; Latex exports
  (org-latex-listings 'minted) ; syntax-highlighted code blocks
  (org-latex-packages-alist '(("margin=1in" "geometry" nil) (nil "minted" "color")))
  (org-latex-pdf-process ; required to use minted
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (org-latex-minted-options '(("linenos" "true") ; line numbers in expored src blocks
                              ("frame" "lines")
                              ("style" "emacs")))
  :custom-face
  ;; Gray out done headlines and text; strike-through the text
  (org-headline-done    ((t (:strike-through t :foreground "#7C6f64"))))
  (org-done             ((t (:foreground "#7C6f64"))))
  :general
  ('(normal insert) org-mode-map
   :prefix "C-c"
   ",v" #'(org-redisplay-inline-images :which-key "redisplay inline images")
   "v"  #'(org-toggle-inline-images    :which-key "toggle inline images")
   "t"  #'(org-todo                    :which-key "todo")
   "s"  #'(org-sort                    :which-key "sort")
   ",s" #'(org-schedule                :which-key "schedule")
   "d"  #'(org-deadline                :which-key "deadline")
   "q"  #'(org-set-tags-command        :which-key "add tags")
   "p"  #'(org-latex-preview           :which-key "preview latex")
   ",t" #'(+org/tangle-config          :which-key "tangle config"))

  ('normal org-mode-map
           "RET" #'org-open-at-point)

  ;; Vim keys calendar maps
  ('org-read-date-minibuffer-local-map
   ";" #'exit-minibuffer
   "M-h" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1)))
   "M-j" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1)))
   "M-k" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1)))
   "M-l" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1)))
   "M-H" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))
   "M-J" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year 1)))
   "M-K" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year 1)))
   "M-L" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1))))

  ;; Folding maps based on vim
  ('normal org-mode-map
           "zo" #'outline-show-subtree
           "zk" #'org-backward-element
           "zj" #'org-forward-element)

  ('(normal insert) org-mode-map
   ;; TODOS with M-;, headlines with C-;, add shift to do those above
   "C-M-;" #'+org/insert-subheading
   "C-:"   #'+org/insert-heading-above
   "M-:"   #'+org/insert-todo-above

   ;; Vim keys > arrow keys
   "M-h"   #'org-metaleft
   "M-j"   #'org-metadown
   "M-k"   #'org-metaup
   "M-l"   #'org-metaright

   "M-H"   #'org-shiftleft
   "M-J"   #'org-shiftdown
   "M-K"   #'org-shiftup
   "M-L"   #'org-shiftright

   "C-M-h" #'org-shiftmetaleft
   "C-M-j" #'org-shiftmetadown
   "C-M-k" #'org-shiftmetaup
   "C-M-l" #'org-shiftmetaright

   "C-S-h" #'org-shiftcontrolleft
   "C-S-j" #'org-shiftcontroldown
   "C-S-k" #'org-shiftcontrolup
   "C-S-l" #'org-shiftcontrolright)
  :config
  (add-hook 'org-mode-hook (lambda () (setq-local evil-auto-indent nil)))
  ;; No unnecessary background highlighting
  (custom-set-faces
   `(org-block            ((t (:background ,bg-color))))
   `(org-block-begin-line ((t (:background ,bg-color))))
   `(org-block-end-line   ((t (:background ,bg-color))))
   `(org-level-1          ((t (:background ,bg-color))))
   `(org-quote            ((t (:background ,bg-color)))))

  (plist-put org-format-latex-options :scale 1.75)) ; Larger inline org latex
#+END_SRC
** Org built-ins
#+BEGIN_SRC emacs-lisp :results none
(use-package org-agenda
  :straight (:type built-in)
  :general
  (my-leader-def
    "oa" #'(org-agenda :which-key "agenda"))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package org-src
  :straight (:type built-in)
  :defer t
  :custom
  (org-src-window-setup 'current-window))

(use-package ob ; org babel
  :straight (:type built-in)
  :defer t
  :custom
  (org-confirm-babel-evaluate nil)
  :general
  ('(normal insert) org-mode-map
   :prefix "C-c"
   "b"  #'(org-babel-tangle :which-key "tangle file")))

(use-package ox ; org exports
  :ensure-system-package (pdflatex . texlive-latexextra)
  :straight (:type built-in)
  :general
  ('(normal insert) org-mode-map
   :prefix "C-c"
   "e" #'(org-export-dispatch :which-key "export")))

(use-package org-capture
  :straight (:type built-in)
  :custom
  (org-capture-templates
   '(("t" "TODO entry"
      entry (file+headline "~/org/todo.org" "Miscellaneous")
      "* TODO %?\n %i\n %a")
     ("d" "org drill"
      entry (file+headline "~/org/notes.org" "Miscellaneous")
      "* %? :drill:")))
  :general
  (my-leader-def
    "oc" #'(org-capture :which-key "org capture")))

(use-package ol ; org links
  :straight (:type built-in)
  :general
  ('(normal insert) org-mode-map
   :prefix "C-c"
   ",l" #'(org-insert-link :which-key "insert link"))
  ('override
   :prefix "C-c"
   "l"  #'(org-store-link  :which-key "store link")))

;; autoload org babel functions for specific languages
(use-package ob-haskell
  :straight (:type built-in)
  :commands org-babel-execute:haskell)

(use-package ob-shell
  :straight (:type built-in)
  :commands org-babel-execute:sh)

(use-package ob-C
  :straight (:type built-in)
  :commands org-babel-execute:C)

(use-package ob-R
  :straight (:type built-in)
  :commands org-babel-execute:R)

(use-package ob-python
  :straight (:type built-in)
  :commands org-babel-execute:python)
#+END_SRC
** Non built-ins
#+BEGIN_SRC emacs-lisp :results none
(use-package org-drill ; spaced repetition flashcards within emacs
  :general
  ('override :prefix "C-c"
             ",d" #'(org-drill :which-key "org drill")))

(use-package org-superstar ; bullets in org mode
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-hide-leading-stars t))

(use-package toc-org ; auto-generate tables of contents w/in org and markdown with a :TOC: tag
  :hook ((org-mode markdown-mode) . toc-org-mode))

(use-package evil-org ; functions to work with evil-mode in org-mode
  :after org
  :general
  ;; bind evil-org functions manually rather than using evil-org-mode, which has some
  ;; conflicting bindings for my preferences
  ('normal org-mode-map
           "o" #'evil-org-open-below
           "O" #'evil-org-open-above)

  ('(normal insert) org-mode-map
   "C-;"   #'evil-org-org-insert-heading-respect-content-below
   "M-;"   #'evil-org-org-insert-todo-heading-respect-content-below))
#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +org/tangle-config ()
  "tangle my org-mode config file to an elisp file"
  (interactive)
  (find-file config-org)
  (org-babel-tangle-file config-org config-el))

;;;###autoload
(defun +org/insert-subheading ()
  "insert a subheading in org mode and go to insert mode"
  (interactive)
  (evil-append-line 1)
  (org-insert-subheading 1))

;;;###autoload
(defun +org/insert-heading-above ()
  "insert an org heading above and jump into insert mode"
  (interactive)
  (evil-append-line 1)
  (move-beginning-of-line nil)
  (org-insert-heading))

;;;###autoload
(defun +org/insert-todo-above ()
  "insert an org todo above and jump into insert mode"
  (interactive)
  (evil-append-line 1)
  (move-beginning-of-line nil)
  (org-insert-todo-heading 1))
#+END_SRC
* Windows, Buffers, Tabs
** Windows
#+BEGIN_SRC emacs-lisp :results none
(use-package ace-window
  :custom
  (aw-keys '(?j ?k ?l ?s ?d ?s ?h ?a))
  :general
  ("M-o" #'ace-window))

(use-package golden-ratio ; auto resize windows
  :hook (window-setup . golden-ratio-mode)
  :custom
  (golden-ratio-auto-scale t)
  :config
  ;; works with ace-window
  (define-advice select-window
      (:after (window &optional no-record) golden-ratio-resize-window)
    (golden-ratio)
    nil))

(use-package winner ; Undo and redo window configs
  :straight (:type built-in)
  :defer 0.3
  :general
  ('evil-window-map
   "u" #'(winner-undo :which-key "undo window operation")
   "r" #'(winner-redo :which-key "redo window operation"))
  :config
  (winner-mode))
#+END_SRC
** Tabs
#+BEGIN_SRC emacs-lisp :results none
(use-package tab-bar
  :straight (:type built-in)
  :custom
  (tab-bar-new-button-show nil)
  (tab-bar-close-button-show nil)
  (tab-bar-show nil)
  :general
  ('normal
   "]t" #'(tab-bar-switch-to-next-tab :which-key "next tab")
   "[t" #'(tab-bar-switch-to-prev-tab :which-key "next-tab")
   "]T" #'(tab-bar-move-tab           :which-key "move tab right")
   "[T" #'(tab-bar-move-tab-to        :which-key "move tab left"))

  (my-leader-def
    "t"        '(:ignore t                    :which-key "Tab")
    "to"      #'(tab-bar-new-tab              :which-key "new tab")
    "tl"      #'(tab-bar-switch-to-recent-tab :which-key "last tab")
    "t SPC g" #'(tab-bar-select-tab           :which-key "choose tab")
    "tg"      #'(tab-bar-switch-to-tab        :which-key "choose tab by name")
    "tn"      #'(tab-bar-switch-to-next-tab   :which-key "next tab")
    "tp"      #'(tab-bar-switch-to-prev-tab   :which-key "previous tab")
    "t SPC d" #'(tab-bar-close-tab-by-name    :which-key "close tab by name")
    "t,d"     #'(tab-bar-close-other-tabs     :which-key "close other tabs")
    "td"      #'(tab-bar-close-tab            :which-key "close tab")
    "tu"      #'(tab-bar-undo-close-tab       :which-key "undo close tab")
    "t SPC r" #'(tab-bar-rename-tab-by-name   :which-key "rename tab by name")
    "tr"      #'(tab-bar-rename-tab           :which-key "rename tab")))
#+END_SRC
* Editing
** Smartparens
#+BEGIN_SRC emacs-lisp :results none
(use-package smartparens ; pair delimiters automatically and functions to work with delimiters
  :defer 0.1
  ;; enable smartparens in ivy-mode
  :hook (ivy-mode . smartparens-mode)
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  (sp-max-prefix-length 25)
  (sp-max-pair-length 4)
  (sp-escape-quotes-after-insert nil)
  (sp-show-pair-from-inside t)
  (sp-cancel-autoskip-on-backward-movement nil) ; quote pairs buggy otherwise
  :general
  ('normal
   ">" (general-key-dispatch #'evil-shift-right
         ")" #'(sp-forward-slurp-sexp :which-key "forward slurp")
         "(" #'(sp-backward-barf-sexp :which-key "backward barf"))
   "<" (general-key-dispatch #'evil-shift-left
         ")" #'(sp-forward-barf-sexp   :which-key "forward barf")
         "(" #'(sp-backward-slurp-sexp :which-key "backward slurp")))
  :config
  (smartparens-global-mode)
  (require 'smartparens-config) ; config for many languages

  ;; Don't pair ', and = in org mode, and pair $
  (sp-local-pair 'org-mode "'" nil :actions nil)
  (eval-after-load 'smartparens-org '(progn
                                       (sp-local-pair 'org-mode "=" nil :actions nil)
                                       (sp-local-pair 'org-mode "~" nil :actions nil)))
  (sp-local-pair 'org-mode "$" "$"))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package format-all ; format code functions
  :custom
  (+format-with-lsp t)
  :general
  (my-leader-def
    :states 'normal
    "=" #'(+format/buffer :which-key "format"))

  (my-leader-def
    :states 'visual
    "=" #'+format/region))

(use-package expand-region ; select a region
  :general
  ("M--" #'er/expand-region))

(use-package move-text
  :general
  ('normal
   "]e" #'(move-text-down :which-key "move text down")
   "[e" #'(move-text-up   :which-key "move text up")))

(use-package avy ; jump to things in files similar to easymotion for vim
  :general
  ('normal
   "go"      #'(avy-goto-char-2     :which-key "2-chars")
   "g SPC o" #'(avy-goto-char-timer :which-key "timer")
   "g SPC l" #'(avy-goto-line       :which-key "line")))
#+END_SRC
* System
** Vterm
#+BEGIN_SRC emacs-lisp :results none
(use-package vterm ; terminal emulator
  :ensure-system-package cmake
  :custom
  (vterm-kill-buffer-on-exit t)
  :general
  (my-leader-def
    "o"    '(:ignore t          :which-key "Open")
    "ot"  #'vterm
    "ovt" #'(vterm-other-window :which-key "vterm in vsplit")))
#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp :results none
(use-package eshell ; shell for elisp and regular shell commands
  :defer-incrementally (em-alias em-banner em-basic em-cmpl
                                 em-dirs em-glob em-hist em-ls em-script em-term)
  :straight (:type built-in)
  :hook ((eshell-mode            . smartparens-mode)
         (eshell-first-time-mode . +eshell/init-keymaps)
         (eshell-post-command    . +eshell/init-aliases-h))
  :custom
  (eshell-prompt-function #'eshell/eshell-local-prompt-function)
  (eshell-directory-name (expand-file-name "eshell/" my/etc-dir))
  :general
  (my-leader-def
    "oe"  #'eshell
    "ove" #'(+eshell/other-window :which-key "eshell in vsplit"))
  :config
  (evil-collection-init 'eshell)

  ;; Aliases
  (advice-add #'eshell-write-aliases-list :override #'ignore))
#+END_SRC
**** Functions
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +eshell/init-keymaps ()
  "initialize eshell keybindings"
  (general-def 'normal eshell-mode-map
    "C-n" (lambda ()
            "jump into insert mode before finding the next match in eshell"
            (interactive)
            (evil-append-line 1)
            (general-simulate-key "C-n"))

    "C-p" (lambda ()
            "jump into insert mode before finding the previous match in eshell"
            (interactive)
            (evil-append-line 1)
            (general-simulate-key "C-p")))

  (general-def 'insert eshell-mode-map
    "C-n" #'eshell-next-matching-input-from-input
    "C-p" #'eshell-previous-matching-input-from-input)

  (general-def '(insert normal) eshell-mode-map
    "C-l" #'+eshell/clear)

  (general-def 'normal eshell-mode-map
    "q" #'kill-this-buffer))

;;;###autoload
(defun +eshell/init-aliases-h ()
  "initialize eshell aliases"
  (dolist (var '(("s" "sudo")

                 ("l" "ls -A")
                 ("ll" "ls -l")
                 ("la" "ls -lA")

                 ("g" "git")
                 ("gs" "git status")
                 ("gl" "git log")
                 ("ga" "git add")
                 ("gaa" "git add -A")
                 ("gcam" "git commit -a m")
                 ("gr" "git reset")
                 ("grs" "git reset --soft HEAD~1")

                 ("gp" "git push -u origin master")
                 ("gF" "git pull")))
    (add-to-list 'eshell-command-aliases-list var)))

;;;###autoload
(defun +eshell/clear ()
  "eshell clear screen"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

;;;###autoload
(defun +eshell/other-window ()
  "open eshell in a vsplit"
  (interactive)
  (evil-window-vsplit)
  (eshell))

;; https://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/
;;;###autoload
(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
            PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let ((git-output (shell-command-to-string
                       (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
      (concat (if (> (length git-output) 0)
                  (substring git-output 0 -1)
                "(no branch)")
              ))))

;; https://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/
;;;###autoload
(defun pwd-repl-home (pwd)
  "shortened version of /home/ex/* for eshell prompt"
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (home-len (length home)))
    (if (and
         (>= (length pwd) home-len)
         (equal home (substring pwd 0 home-len)))
        (concat "~" (substring pwd home-len))
      pwd)))

;; https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
;;;###autoload
(defun eshell/eshell-local-prompt-function ()
  "A prompt for eshell that works locally (in that is assumes
            that it could run certain commands) in order to make a prettier,
            more-helpful local prompt."
  (interactive)
  (let* ((pwd       (eshell/pwd))
         (directory (pwd-repl-home pwd))
         (branch    (curr-dir-git-branch-string pwd))

         (dark-env  (eq 'dark (frame-parameter nil 'background-mode)))
         (for-bars               `(:foreground "#98971a" :weight bold))
         (for-dir   (if dark-env `(:foreground "#8ec07c" :weight bold)
                      `(:foreground "blue" :weight bold)))
         (for-git                `(:foreground "#fabd2f" :weight bold)))

    (concat
     (propertize directory        'face for-dir)
     (when branch
       (concat (propertize " on " 'face for-bars)
               (propertize branch 'face for-git)))

     (propertize " # " 'face `(:foreground "#ebdbb2")))))
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp :results none
(use-package tramp ; access remote files within emacs
  :straight (:type built-in)
  :custom
  (tramp-autosave-directory    (expand-file-name "tramp/auto-save/" my/etc-dir))
  (tramp-persistency-file-name (expand-file-name "tramp/persistency.el" my/etc-dir))
  :general
  (my-localleader-def
    "t"  '(:ignore t            :which-key "Tramp ssh")
    "tr" #'(+tramp/ssh-rlogin   :which-key "rlogin")
    "tc" #'(+tramp/ssh-cascades :which-key "cascades")))
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +tramp/ssh-rlogin ()
  "ssh into rlogin through tramp"
  (interactive)
  (find-file "/sshx:lancebergeron@rlogin.cs.vt.edu:~/"))

;;;###autoload
(defun +tramp/ssh-cascades ()
  "ssh into cascades through tramp"
  (interactive)
  (find-file "/sshx:lancebergeron@cascades1.arc.vt.edu:~/"))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp :results none
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-auto-revert-buffer) ; don't prompt to revert
  (dired-recursive-copies 'always)
  :general
  ('normal
   "-"  #'(dired-jump :which-key "open dired"))
  :config
  (evil-collection-init 'dired)

  (general-def 'normal dired-mode-map
    "i" #'+dired/edit))

(use-package dired-x
  :straight (:type built-in)
  :hook (dired-mode . dired-omit-mode)
  :custom
  (dired-omit-files "^\\..$\\|^.$")) ; hide .. and ../ in dired
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package restart-emacs
  :custom
  (restart-emacs-restore-frames t) ; Restore frames on restart
  :general
  (my-leader-def
    "e"        '(:ignore t     :which-key "Emacs Commands")
    "e SPC r" #'(restart-emacs :which-key "restart emacs")))

(use-package helpful ; better help menu
  :general
  ('normal
   "gh" #'helpful-at-point)
  ('normal helpful-mode-map
           "q" #'quit-window)

  ([remap describe-command] #'helpful-command
   [remap describe-key]     #'helpful-key
   [remap describe-symbol]  #'helpful-symbol)
  :config
  (evil-collection-inhibit-insert-state 'helpful-mode-map))

(use-package gcmh ; Garbage collect in idle time
  :defer 0.4
  :commands gcmh-idle-garbage-collect
  :custom
  (gcmh-idle-delay 10)
  (gcmh-high-cons-threshold 16777216)
  :config
  (gcmh-mode)
  (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect))

(use-package keyfreq ; save command frequency
  :hook (pre-command . keyfreq-mode)
  :custom
  (keyfreq-file (expand-file-name "keyfreq" my/etc-dir))
  (keyfreq-file-lock (expand-file-name "keyfreq-lock" my/etc-dir))
  (keyfreq-excluded-commands
   '(org-self-insert-command
     self-insert-command
     vterm--self-insert
     mwheel-scroll
     eshell-send-input))
  :general
  (my-leader-def
    "fc" #'(keyfreq-show :which-key "show command frequency"))
  :config
  (keyfreq-autosave-mode 1))

(use-package dumb-jump ; better way to search code
  :defer t
  :custom
  (dumb-jump-default-project "~/code")
  (dumb-jump-selector 'ivy)
  (dumb-jump-prefer-searcher 'rg)
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp :results none
(defun +dired/edit ()
  "stay in normal mode to edit dired file names"
  (interactive)
  (dired-toggle-read-only)
  (evil-normal-state)
  (evil-forward-char))
#+END_SRC
* Filetype Specific
** PDF
#+BEGIN_SRC emacs-lisp :results none
(use-package pdf-tools
  ;; Fork that fixes an error I was getting only on gccemacs:
  ;; "undefined function pdf-view-current-page"
  :straight (:host github
                   :repo "flatwhatson/pdf-tools"
                   :branch "fix-macros"
                   :flavor nil)
  :mode ("\\.pdf\\'" . pdf-view-mode)
  ;; no line numbers in pdfs
  :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  :custom
  ;; (pdf-view-display-size 'fit-page)
  (pdf-view-use-scaling t)
  :general
  ('normal pdf-view-mode-map ; scroll with just d and u
           "d" #'pdf-view-scroll-up-or-next-page
           "u" #'pdf-view-scroll-down-or-previous-page)
  :config
  ;; no cursor in pdfs
  (setq-local make-pointer-invisible t)
  (evil-collection-pdf-setup)
  (pdf-loader-install :no-query))
#+END_SRC
** C family
#+BEGIN_SRC emacs-lisp :results none
(use-package cc-mode
  :ensure-system-package (clang gcc)
  :straight (:type built-in)
  :hook (c-mode-common . +cc/company-mode)
  :custom
  (c-basic-offset 4)
  (c-default-style "linux")
  :general
  ('c-mode-base-map
   "M-;" #'my/append-semicolon))

(use-package gdb-mi
  :straight (:type built-in)
  :ensure-system-package gdb
  :after cc-mode
  :general
  ('c-mode-map
   "C-c g" #'(gdb :which-key "gdb")))
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +cc/company-mode ()
  "company backends for c-mode"
  (setq-local company-backends
              '((company-cmake
                 company-capf
                 company-clang
                 company-dabbrev-code
                 company-files
                 company-yasnippet
                 company-keywords))))
#+END_SRC
** Statistics (R)
#+BEGIN_SRC emacs-lisp :results none
(use-package ess
  :ensure-system-package (R . r)
  :hook (ess-r-mode . +ess/company-mode)
  :general
  ('(normal insert) ess-mode-map
   "C-;" #'ess-eval-line
   "M-;" #'ess-eval-buffer)

  ('visual ess-mode-map
           "C-;" #'ess-eval-region)

  ('(normal insert) ess-mode-map
   :prefix "C-c"
   "o" #'R
   "b" #'(ess-eval-buffer   :which-key "eval R buffer")
   "r" #'(ess-eval-region   :which-key "eval R region")
   "f" #'(ess-eval-function :which-key "eval R function")
   "h" #'(ess-doc-map       :which-key "R help")))
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +ess/company-mode ()
  "company backends for r mode"
  (setq-local company-backends
              '((company-R-args
                 company-R-objects
                 company-dabbrev-code
                 company-files
                 company-yasnippet))))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp :results none
(use-package markdown-mode
  :straight (:type built-in)
  :general
  ('normal markdown-mode-map "RET" #'markdown-follow-thing-at-point))

(use-package pandoc-mode
  :ensure-system-package pandoc
  :hook (markdown-mode . pandoc-mode)
  :general
  ('markdown-mode-map
   :prefix "C-c"
   "e" #'(pandoc-main-hydra/body :which-key "pandoc")))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp :results none
;; TODO - move to rustic and use cargo.el, ensure-system-package
(use-package rust-mode
  :defer t)
#+END_SRC
