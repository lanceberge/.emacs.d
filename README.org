* Table of Contents                                                   :TOC_3:
- [[#early-init][Early-Init]]
  - [[#initial-settings][Initial Settings]]
  - [[#straight][Straight]]
  - [[#ui][UI]]
- [[#init][Init]]
- [[#initial][Initial]]
  - [[#settings][Settings]]
  - [[#os-specific][OS Specific]]
  - [[#defer-incrementally][Defer Incrementally]]
  - [[#keymap-management][Keymap Management]]
  - [[#built-in-packages][Built-in Packages]]
  - [[#keybindings][Keybindings]]
  - [[#hooks][Hooks]]
- [[#evil-mode][Evil Mode]]
  - [[#evil][Evil]]
  - [[#evil-collection][Evil-Collection]]
  - [[#extra-operatorsmotion][Extra operators/motion]]
  - [[#miscellaneous][Miscellaneous]]
- [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#yasnippet][Yasnippet]]
  - [[#company][Company]]
- [[#version-control][Version Control]]
- [[#project-management][Project Management]]
- [[#lsp-related][LSP-Related]]
- [[#ui-1][UI]]
- [[#org][Org]]
  - [[#org-1][Org]]
  - [[#org-built-ins][Org built-ins]]
  - [[#non-built-ins][Non built-ins]]
- [[#windows-buffers-directory-management][Windows, Buffers, Directory Management]]
  - [[#dired][Dired]]
  - [[#windows][Windows]]
- [[#editing][Editing]]
  - [[#smartparens][Smartparens]]
  - [[#miscellaneous-1][Miscellaneous]]
- [[#system][System]]
  - [[#terminalsshells][Terminals/shells]]
  - [[#miscellaneous-2][Miscellaneous]]
- [[#filetype-specific][Filetype Specific]]
  - [[#pdf][PDF]]
  - [[#c-family][C family]]
  - [[#statistics-r][Statistics (R)]]
  - [[#markdown][Markdown]]
- [[#functions][Functions]]
  - [[#miscellaneous-3][Miscellaneous]]
  - [[#format][Format]]
  - [[#mode-specific][Mode specific]]
    - [[#org-2][Org]]
    - [[#eshell][Eshell]]
    - [[#ess-r][ESS-R]]

* Early-Init

Tangles to early-init.el

** Initial Settings
#+BEGIN_SRC emacs-lisp :results none :tangle early-init.el
;;; -*- lexical-binding: t -*-
(setq gc-cons-threshold most-positive-fixnum)

(defconst IS-LINUX (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

(setq package-enable-at-startup nil)
(advice-add #'package--ensure-init-file :override #'ignore)

(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq emacs-load-start-time (current-time)
      menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil
      frame-inhibit-implied-resize t
      inhibit-default-init t
      site-run-file nil
      comp-deferred-compilation nil)

(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono"
                    :height 110
                    :weight 'normal
                    :width 'normal)


(advice-add #'x-apply-session-resources :override #'ignore)
#+END_SRC
** Straight
#+BEGIN_SRC emacs-lisp :results none :tangle early-init.el
;; Bootstrap straight.el
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; use-package uses straight.el
(setq straight-use-package-by-default t
      straight-repository-branch "develop"
      straight-check-for-modifications nil
      straight-vc-git-default-clone-depth 1
      straight-fix-org nil)

(straight-use-package 'use-package)
(setq use-package-verbose t) ; show which packages are being loaded on startup and when
#+END_SRC
** UI
#+BEGIN_SRC emacs-lisp :results none :tangle early-init.el
(use-package gruvbox-theme
  :config
  (load-theme 'gruvbox t))

(use-package display-line-numbers
  :straight (:type built-in)
  :custom
  (display-line-numbers-width-start t)
  :custom-face
  (line-number ((t (:background "#282828"))))
  (line-number-current-line ((t (:background "#282828"))))
  :config
  (global-display-line-numbers-mode)
  (when IS-LINUX
    (setq-default display-line-numbers-type 'visual)))

;; Minimalistic mode-line
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                mode-line-mule-info
                mode-line-client-mode
                mode-line-modified
                mode-line-remote
                mode-line-frame-indentifcation
                " "
                mode-line-buffer-identification
                "  "
                ;; '(:eval (propertize (vc-mode) 'face '(:foreground "black") 'help-echo (vc-mode)))
                vc-mode
                " "
                mode-line-modes
                " "
                mode-line-misc-info
                mode-line-end-spaces))


(custom-set-faces '(mode-line ((t (:background "#282828" :foreground "#928374"))))
                  '(mode-line-inactive ((t (:background "#282828"))))
                  '(mode-line-buffer-id ((t (:bold t)))))

(set-face-foreground 'vertical-border "#282828")
#+END_SRC
* Init

Tangles to init.el

Loads the file config.el on startup. Every time I exit emacs (if org has been loaded), this file tangles to config.el (defined in [[*Org][Org]] under kill-emacs-hook). If the file doesn't exist, org is loaded and the file is tangled.

#+BEGIN_SRC emacs-lisp :tangle init.el :results none
;;; -*- lexical-binding: t -*-
(defconst config-org (expand-file-name "README.org" user-emacs-directory))
(defconst config-el  (expand-file-name "config.el" user-emacs-directory))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC
* Initial

The rest of this file tangles to config.el

** Settings

Mostly taken from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;;; -*- lexical-binding: t -*-
(use-package emacs
  :custom
  (default-file-name-handler-alist file-name-handler-alist)

  (file-name-handler-alist nil)
  (gc-cons-threshold most-positive-fixnum)
  (gc-cons-percentage 0.6)

  (load-prefer-newer noninteractive)
  (locale-coding-system 'utf-8)
  (message-log-max 5000) ; longer number of max messages
  (ring-bell-function 'ignore)

  ;; startup.el settings
  (inhibit-startup-screen t)
  (inhibit-startup-message t)
  (inhibit-startup-echo-area-message user-login-name)

  ;; inhibit-default-init t
  (initial-scratch-message nil)
  (initial-major-mode 'fundamental-mode) ; start in an empty mode
  (user-mail-address "bergeron.lance6@gmail.com")

  (kill-buffer-query-functions nil)
  (inhibit-compacting-font-caches t) ; inhibit font compacting
  (highlight-nonselected-windows nil)
  (ffap-machine-p-known 'reject) ; don't ping things that look like domain names
  (bidi-inhibit-bpa t)
  (fast-but-imprecise-scrolling t) ; faster scrolling over unfontified regions

  ;; User Settings
  (user-full-name "Lance Bergeron")

  ;; Scrolling
  (scroll-conservatively 1000)
  (scroll-margin 4)
  (scroll-step 1)

  ;; General
  (indent-tabs-mode nil)
  (apropos-do-all t) ; more extensive apropos searches

  ;; Disable bidirectional text rendering for performance
  (bidi-display-reordering 'left-to-right)
  (bidi-paragraph-direction 'left-to-right)
  (cursor-in-non-selected-windows nil)
  (indent-tabs-mode nil)

  ;; Keeping ~/.emacs.d clean
  (my/etc-dir                  (expand-file-name "etc/" user-emacs-directory))
  (custom-file                 (expand-file-name "custom.el" my/etc-dir))
  (custom-theme-directory      (expand-file-name "themes/" my/etc-dir))
  (url-configuration-directory (expand-file-name "url/" my/etc-dir))
  (url-cache-directory         (expand-file-name "url/" my/etc-dir))
  (persist--directory-location (expand-file-name "persist/" my/etc-dir))
  (transient-history-file      (expand-file-name "transient/history.el" my/etc-dir))
  (auto-save-list-file-prefix  (expand-file-name "auto-save/sessions" my/etc-dir)))

(advice-add #'tty-run-terminal-initialization :override #'ignore)

(advice-add #'display-startup-echo-area-message :override #'ignore) ; Get rid of For information about GNU Emacs message

(fset 'yes-or-no-p 'y-or-n-p) ; y or n prompt, not yes or no
#+END_SRC
** OS Specific
#+BEGIN_SRC emacs-lisp :results none
(unless IS-WINDOWS
  (setq selection-coding-system 'utf-8))

(when IS-WINDOWS
  (setq w32-get-true-file-attributes nil
        w32-pipe-read-delay 0
        w32-pipe-buffer-size (* 64 1024)
        w32-lwindow-modifier 'super
        w32-rwindow-modifier 'super
        abbreviated-home-dir "\\ `'"))

(when (and IS-WINDOWS (null (getenv "HOME")))
  (setenv "HOME" (getenv "USERPROFILE")))

(unless IS-LINUX
  (setq command-line-x-option-alist nil))

(when IS-LINUX
  (setq x-gtk-use-system-tooltips nil))
#+END_SRC
** Defer Incrementally

Use :defer-incrementally with packages with a lot of dependencies to incrementally load them in idle time

Taken entirely from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;; https://github.com/hlissner/doom-emacs/blob/42a21dffddeee57d84e82a9f0b65d1b0cba2b2af/core/core.el#L353
(defvar doom-incremental-packages '(t)
  "A list of packages to load incrementally after startup. Any large packages
    here may cause noticeable pauses, so it's recommended you break them up into
    sub-packages. For example, `org' is comprised of many packages, and can be
    broken up into:
      (doom-load-packages-incrementally
       '(calendar find-func format-spec org-macs org-compat
         org-faces org-entities org-list org-pcomplete org-src
         org-footnote org-macro ob org org-clock org-agenda
         org-capture))
    This is already done by the lang/org module, however.
    If you want to disable incremental loading altogether, either remove
    `doom-load-packages-incrementally-h' from `emacs-startup-hook' or set
    `doom-incremental-first-idle-timer' to nil.")

(defvar doom-incremental-first-idle-timer 2.0
  "How long (in idle seconds) until incremental loading starts.
    Set this to nil to disable incremental loading.")

(defvar doom-incremental-idle-timer 0.75
  "How long (in idle seconds) in between incrementally loading packages.")

(defvar doom-incremental-load-immediately nil
  ;; (daemonp)
  "If non-nil, load all incrementally deferred packages immediately at startup.")

(defmacro appendq! (sym &rest lists)
  "Append LISTS to SYM in place."
  `(setq ,sym (append ,sym ,@lists)))

(defun doom-load-packages-incrementally (packages &optional now)
  "Registers PACKAGES to be loaded incrementally.
    If NOW is non-nil, load PACKAGES incrementally, in `doom-incremental-idle-timer'
    intervals."
  (if (not now)
      (appendq! doom-incremental-packages packages)
    (while packages
      (let ((req (pop packages)))
        (unless (featurep req)
          (message "Incrementally loading %s" req)
          (condition-case e
              (or (while-no-input
                    ;; If `default-directory' is a directory that doesn't exist
                    ;; or is unreadable, Emacs throws up file-missing errors, so
                    ;; we set it to a directory we know exists and is readable.
                    (let ((default-directory user-emacs-directory)
                          (gc-cons-threshold most-positive-fixnum)
                          file-name-handler-alist)
                      (require req nil t))
                    t)
                  (push req packages))
            ((error debug)
             (message "Failed to load '%s' package incrementally, because: %s"
                      req e)))
          (if (not packages)
              (message "Finished incremental loading")
            (run-with-idle-timer doom-incremental-idle-timer
                                 nil #'doom-load-packages-incrementally
                                 packages t)
            (setq packages nil)))))))

(defun doom-load-packages-incrementally-h ()
  "Begin incrementally loading packages in `doom-incremental-packages'.
    If this is a daemon session, load them all immediately instead."
  (if doom-incremental-load-immediately
      (mapc #'require (cdr doom-incremental-packages))
    (when (numberp doom-incremental-first-idle-timer)
      (run-with-idle-timer doom-incremental-first-idle-timer
                           nil #'doom-load-packages-incrementally
                           (cdr doom-incremental-packages) t))))

(add-hook 'emacs-startup-hook #'doom-load-packages-incrementally-h)

;; Adds two keywords to `use-package' to expand its lazy-loading capabilities:
;;
;;   :after-call SYMBOL|LIST
;;   :defer-incrementally SYMBOL|LIST|t
;;
;; Check out `use-package!'s documentation for more about these two.
(eval-when-compile
  (dolist (keyword '(:defer-incrementally :after-call))
    (push keyword use-package-deferring-keywords)
    (setq use-package-keywords
          (use-package-list-insert keyword use-package-keywords :after)))

  (defalias 'use-package-normalize/:defer-incrementally #'use-package-normalize-symlist)
  (defun use-package-handler/:defer-incrementally (name _keyword targets rest state)
    (use-package-concat
     `((doom-load-packages-incrementally
        ',(if (equal targets '(t))
              (list name)
            (append targets (list name)))))
     (use-package-process-keywords name rest state))))
#+END_SRC
** Keymap Management
#+BEGIN_SRC emacs-lisp :results none
(use-package general ; unified way to map keybindings; works with :general in use-package
  :demand t
  :config
  (general-create-definer my-leader-def ; SPC prefixed bindings
    :states '(normal visual motion insert emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-create-definer my-localleader-def ; , prefixed bindings
    :states '(normal visual motion insert emacs)
    :keymaps 'override
    :prefix ","
    :non-normal-prefix "C-,")
  (my-leader-def
    "f"   '(:ignore t                    :which-key "Find")
    "fm" #'(general-describe-keybindings :which-key "list keybindings")))

(use-package diminish
  :defer t)

(use-package which-key ; show keybindings following when a prefix is pressed
  :diminish
  :hook (pre-command . which-key-mode)
  :general
  (my-leader-def
    "f SPC m" #'(which-key-show-top-level :which-key "keybinding"))
  :custom
  (which-key-sort-order #'which-key-prefix-then-key-order)
  (which-key-min-display-lines 6)
  (which-key-add-column-padding 1)
  (which-key-sort-uppercase-first nil))

(use-package hydra
  :defer t)
#+END_SRC
** Built-in Packages
#+BEGIN_SRC emacs-lisp :results none
(use-package simple
  :straight (:type built-in)
  :defer t
  :custom
  (idle-update-delay 1.0) ; slow down how often emacs updates its ui
  (kill-do-not-save-duplicates t) ; no duplicates in kill ring
  :config
  (global-visual-line-mode 1)) ; makes wrapped lines easlier to work with

(use-package advice
  :straight (:type built-in)
  :defer t
  :custom (ad-redefinition-action 'accept)) ; disable warnings from legacy advice system

(use-package files
  :straight (:type built-in)
  :defer t
  :custom
  (make-backup-files nil)
  (create-lockfiles nil)
  (auto-mode-case-fold nil)
  (auto-save-default nil))

(use-package saveplace
  :straight (:type built-in)
  :hook (pre-command . save-place-mode)
  :custom
  (save-place-file (expand-file-name "places" my/etc-dir)))

(use-package whitespace
  :straight (:type built-in)
  :hook (before-save . whitespace-cleanup))

(use-package eldoc
  :straight (:type built-in)
  :defer t
  :diminish)

(use-package savehist
  :straight (:type built-in)
  :hook (pre-command . savehist-mode)
  :custom
  (savehist-file (expand-file-name "savehist" my/etc-dir))
  (history-length 500)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t))

(use-package recentf
  :straight (:type built-in)
  :defer-incrementally (easymenu tree-widget timer)
  :defer t
  :custom
  (recentf-auto-cleanup 'never)
  (recentf-save-file (expand-file-name "recentf" my/etc-dir))
  (recentf-max-saved-items 200))

;; TODO change to :ensure-system-dependency
(when IS-LINUX
  (use-package flyspell
    :straight (:type built-in)
    :diminish
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))))

(use-package eldoc
  :straight (:type built-in)
  :defer t
  :diminish)

(use-package bookmark
  :straight (:type built-in)
  :defer t
  :custom
  (bookmark-default-file (expand-file-name "bookarks" my/etc-dir)))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp :results none
(use-package emacs
  :general
  (my-leader-def
    "h" (general-simulate-key "C-h"   :which-key "+Help")
    ;; Windows
    ";"  #'(shell-command             :which-key "shell command")
    "w"   (general-simulate-key "C-w" :which-key "+Windows") ; window command
    ;; Buffers
    "b"   '(:ignore t                 :which-key "Buffers")
    "bs" #'(save-buffer               :which-key "write file")
    "bd" #'(kill-this-buffer          :which-key "delete buffer")
    "bq" #'(my/save-and-kill-buffer   :which-key "kill window and buffer")
    "b SPC d" #'my/kill-window-and-buffer
    "br" #'revert-buffer

    "er" #'(eval-region               :which-key "execute elisp region")
    "es" #'(eval-last-sexp            :which-key "execute elisp sexp")
    "ee" #'(eval-expression           :which-key "evaluate elisp expression")
    "eb" #'(eval-buffer               :which-key "evaluate elisp buffer")
    "ef" #'(eval-defun                :which-key "evaluate elisp defun")
    "'"    "C-c '")

  ('normal
   "gs" #'my/split-line
   "gS" (lambda () (interactive) (my/split-line) (move-text-up)) ; split line above
   "gC" #'my/comment-until-end-of-line
   "]b" #'(next-buffer     :which-key "next buffer")
   "[b" #'(previous-buffer :which-key "previous buffer"))

  (my-localleader-def
    "c" (general-simulate-key "C-c" :which-key "+Mode specific maps"))

  ('(normal insert)
   :prefix "C-c"
   "SPC" (general-simulate-key "C-c C-c"))

  ('insert
   "C-y" #'yank)) ; otherwise is overridden by evil
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'after-init-hook
          (lambda ()
            (when (require 'time-date nil t)
              (message "Emacs init time: %.2f seconds."
                       (time-to-seconds (time-since emacs-load-start-time))))))

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold 16777216
                  gc-cons-percentage 0.1
                  file-name-handler-alist default-file-name-handler-alist)))

;; Raise gc threshold while minibuffer is active to not slow down ivy
(defun doom-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun doom-restore-garbage-collection-h ()
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold 16777216))))

(add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)
#+END_SRC
* Evil Mode
** Evil
#+BEGIN_SRC emacs-lisp :results none
(use-package evil ; vim bindings in emacs
  :demand t
  :diminish
  :commands
  (evil-quit
   evil-save-modified-and-close)
  :custom
  ;; TODO nohl
  (evil-want-C-u-scroll t)
  (evil-want-Y-yank-to-eol t)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-search-wrap t)
  (evil-want-keybinding nil)
  (evil-search-module 'evil-search) ; swiper searches swap n and N if this isn't set
  :general
  ('normal ; navigate wrapped lines like normal lines, works great with relative line numbers
   [remap evil-next-line] #'evil-next-visual-line
   [remap evil-previous-line] #'evil-previous-visual-line)

  ('evil-ex-completion-map ";" 'exit-minibuffer) ; use ; to complete : vim commands
  ('normal
   "zR" #'evil-open-folds
   "zM" #'evil-close-folds
   "gm" (general-simulate-key "@@")) ; last macro

  ('(normal visual motion)
   ";" #'evil-ex ; switch ; and :
   "H" #'evil-first-non-blank
   "L" #'evil-end-of-line)

  ;; Evil-avy
  ('normal
   "go" #'(evil-avy-goto-char-2     :which-key "2-chars"))

  (my-leader-def
    "go" #'evil-avy-goto-char-timer
    "gl" #'evil-avy-goto-line)

  (my-leader-def
    "ft" #'(evil-avy-goto-char-timer           :which-key "avy timer")
    "bS" #'(evil-write-all                     :which-key "write all buffers")
    "bl" #'(evil-switch-to-windows-last-buffer :which-key "last buffer"))

  ('evil-window-map
   "d" #'evil-quit ; delete window
   "q" #'evil-save-modified-and-close ; quit and save window
   "SPC q" '(save-buffers-kill-emacs :which-key "save buffers & quit emacs"))

  ('(normal insert)
   "C-l" #'evil-ex-nohighlight)
  :config
  (evil-mode)
  (diminish 'defining-kbd-macro)) ; don't add DEF in modeline when writing a macro TODO change to :diminish
#+END_SRC
** Evil-Collection
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-collection ; evil bindings for many modes
  :defer t
  :custom
  (evil-collection-want-unimpaired-p t)
  (evil-collection-setup-minibuffer t)
  (evil-collection-mode-list
   '(minibuffer
     ivy
     dired
     eshell
     (pdf pdf-tools))))
#+END_SRC
** Extra operators/motion
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-snipe ; 2 character searches with s (ala vim-sneak)
  :diminish evil-snipe-local-mode
  :hook ((pre-command . evil-snipe-override-mode)
         (pre-command . evil-snipe-mode))
  :custom
  (evil-snipe-show-prompt nil)
  (evil-snipe-skip-leading-whitespace nil)
  :general
  ('motion
   ":"   #'evil-snipe-repeat
   "M-," #'evil-snipe-repeat-reverse))

(use-package evil-surround ; s as an operator for surrounding
  :diminish
  :hook ((prog-mode text-mode) . evil-surround-mode))

(use-package evil-commentary ; gc as an operator to comment
  :diminish
  :hook ((prog-mode org-mode) . evil-commentary-mode))

(use-package evil-numbers ; increment/decrement numbers
  :general
  (my-localleader-def
    "n"   '(:ignore t              :which-key "Evil-Numbers")
    "nu" #'(evil-numbers/inc-at-pt :which-key "increment")
    "nd" #'(evil-numbers/dec-at-pt :which-key "decrement")))

(use-package evil-lion ; gl as an operator to left-align, gL to right-align
  :diminish
  :hook ((prog-mode text-mode) . evil-lion-mode))

(use-package evil-matchit ; navigate matching blocks of code with %
  :diminish
  :hook ((prog-mode text-mode) . evil-matchit-mode)
  :general
  ('motion
   "%" #'evilmi-jump-items))

(use-package evil-exchange ; exchange text selected with gx
  :general
  ('(normal visual)
   "gx" #'evil-exchange
   "gX" #'evil-exchange-cancel))

(use-package evil-owl
  :diminish
  :hook ((prog-mode text-mode) . evil-owl-mode))

(use-package evil-textobj-anyblock
  :general
  ('evil-inner-text-objects-map "c" #'evil-textobj-anyblock-inner-block)
  ('evil-outer-text-objects-map "c" #'evil-textobj-anyblock-a-block))

(use-package evil-args
  :general
  ('evil-inner-text-objects-map "a" #'evil-inner-arg)
  ('evil-outer-text-objects-map "a" #'evil-outer-arg))

(use-package evil-indent-plus
  :general
  ('evil-inner-text-objects-map
   "i" #'evil-indent-plus-i-indent
   "I" #'evil-indent-plus-i-indent-up
   "J" #'evil-indent-plus-i-indent-up-down)

  ('evil-outer-text-objects-map
   "i" #'evil-indent-plus-a-indent
   "I" #'evil-indent-plus-a-indent-up
   "J" #'evil-indent-plus-a-indent-up-down))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-escape ; jk to leave insert mode
  :diminish
  :hook (pre-command . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.25)
  (evil-escape-excluded-major-modes '(evil-magit-mode org-agenda-mode))
  (evil-escape-excluded-states '(normal visual emacs)))

(use-package origami ; code folding
  :diminish
  :hook (prog-mode . origami-mode)
  :general
  ('normal origami-mode
           "zc" #'origami-close-node-recursively
           "zo" #'origami-open-node-recursively
           "zj" #'origami-next-fold
           "zk" #'origami-previous-fold
           "zm" #'origami-close-all-nodes
           "zr" #'origami-open-all-nodes))

(use-package evil-mc ; multiple cursors
  :diminish
  :hook ((prog-mode text-mode) . evil-mc-mode))

(use-package goto-chg ; g; and g,
  :defer t)
#+END_SRC
* Completion
** Ivy
#+BEGIN_SRC emacs-lisp :results none
(use-package swiper
  :general
  ('normal
   [remap evil-ex-search-forward]  #'swiper
   [remap evil-ex-search-backward] #'swiper-backward)
  (my-leader-def
    "fb" #'(swiper-multi :which-key "swiper in buffer")
    "fB" #'(swiper-all   :which-key "swiper in all buffers")))

(use-package ivy ; narrowing framework
  :diminish
  :hook (pre-command . ivy-mode)
  :general
  ('(normal insert) ivy-minibuffer-map
   ";"   #'exit-minibuffer
   "C-j" #'ivy-next-line
   "C-k" #'ivy-previous-line)

  ('normal ivy-minibuffer-map
           "q" #'minibuffer-keyboard-quit)

  ('minibuffer-local-mode-map
   ";" #'exit-minibuffer)
  :custom
  (ivy-initial-inputs-alist nil) ; no initial ^, let flx do all the sorting work
  (ivy-re-builders-alist '((swiper                . ivy--regex-plus)
                           (counsel-rg            . ivy--regex-plus)
                           (counsel-projectile-rg . ivy-regex-plus)
                           (t                     . ivy--regex-fuzzy)))
  :config
  (evil-collection-init 'minibuffer)
  (evil-collection-init 'ivy))

(use-package counsel ; ivy support for many functions
  :diminish
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :general
  (my-leader-def
    "."   #'(counsel-find-file :which-key "find file")
    "SPC" #'(ivy-switch-buffer :which-key "switch buffer")
    "fr"  #'(counsel-recentf   :which-key "find recent files")
    "fi"  #'(counsel-imenu     :which-key "imenu")
    "fg"  #'(counsel-git       :which-key "git files")
    "fG"  #'(counsel-git-grep  :which-key "git grep")
    "ff"  #'(counsel-rg        :which-key "ripgrep"))
  (my-localleader-def
    "x" #'(counsel-M-x :which-key "M-x"))
  :config
  (counsel-mode))

(use-package amx ; show recently used commands
  :hook (pre-command . amx-mode)
  :custom
  (amx-save-file (expand-file-name "amx-history" my/etc-dir))
  (amx-history-length 50))

(use-package flx
  :after counsel) ; fuzzy sorting for ivy
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp :results none
(use-package yasnippet ; snippets
  :diminish yas-minor-mode
  :defer 0.2
  :defer-incrementally (eldoc easymenu help-mode)
  :general
  (my-leader-def
    "s"   '(:ignore t           :which-key "Yasnippet")
    "si" #'(yas-insert-snippet  :which-key "insert snippet")
    "sn" #'(yas-new-snippet     :which-key "new snippet")
    "sl" #'(yas-describe-tables :which-key "list snippets"))
  :config
  (yas-global-mode))

(use-package yasnippet-snippets
  :after yasnippet)

(use-package auto-yasnippet
  :general
  (my-leader-def
    "yc" #'(aya-create :which-key "create aya snippet")
    "ye" #'(aya-expand :which-key "expand aya snippet")))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp :results none
(use-package company ; autocomplete
  :diminish
  :defer 0.1
  :custom
  (company-idle-delay nil) ; manual completion only
  (company-require-match 'never)
  (company-show-numbers t)
  (company-dabbrev-other-buffers nil)
  (company-dabbrev-ignore-case nil)

  ;; global default for the backend, buffer-local backends will be set based on filetype
  (company-backends '(company-capf
                      company-files
                      company-yasnippet))
  :general
  ('insert company-mode-map
           [remap evil-complete-next] #'company-manual-begin) ; manual completion with C-n
  :config
  (global-company-mode)
  (general-def 'company-active-map "TAB" nil) ; don't use tab to complete - buggy with company-yasnippet

  (general-def 'company-active-map "C-w" nil ; don't override evil C-w
    "C-j" #'company-select-next-or-abort
    "C-k" #'company-select-previous-or-abort
    "C-n" #'company-select-next-or-abort
    "C-p" #'company-select-previous-or-abort
    ";"   #'company-complete-selection)) ; choose a completion with ; instead of tab

(use-package company-flx ; fuzzy sorting for company completion options with company-capf
  :hook (company-mode . company-flx-mode))
#+END_SRC
* Version Control
#+BEGIN_SRC emacs-lisp :results none
(use-package magit ; git client
  :defer-incrementally
  (dash f s with-editor git-commit package eieio lv transient evil-magit)
  :custom
  (magit-auto-revert-mode nil)
  (magit-save-repository-buffers nil)
  :general
  (my-leader-def
    "g"    '(:ignore t                  :which-key "Git")
    "gs"  #'(magit-status               :which-key "status")
    "gb"  #'(magit-branch-checkout      :which-key "checkout branch")
    "gc"  #'(magit-clone                :which-key "clone")
    "gd"  #'(magit-file-delete          :which-key "delete file")
    "gF"  #'(magit-fetch                :which-key "fetch")
    "gn"   '(:ignore t                  :which-key "New")
    "gnb" #'(magit-branch-and-checkout  :which-key "branch")
    "gnf" #'(magit-commit-fixup         :which-key "fixup commit")
    "gi"  #'(magit-init                 :which-key "init")
    "gf"   '(:ignore t                  :which-key "Find")
    "gfc" #'(magit-show-commit          :which-key "show commit")
    "gff" #'(magit-find-file            :which-key "file")
    "gfg" #'(magit-find-git-config-file :which-key "git config file")))

(use-package evil-magit ; evil bindings for magit
  :after magit
  :custom
  (evil-magit-state 'normal)
  (evil-magit-use-z-for-folds t))
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp :results none
(use-package projectile ; project management
  :diminish
  :commands projectile-mode
  :custom
  (projectile-auto-discover nil)
  (projectile-project-search-path '("~/code/"))
  (projectile-cache-file (expand-file-name "projectile/cache.el" my/etc-dir))
  (projectile-known-projects-file (expand-file-name "projectile/known-projects.el" my/etc-dir))
  :config
  (my-leader-def
    "p" #'(projectile-command-map :which-key "Projectile"))) ;; TODO bind these manually

(use-package counsel-projectile
  :defer 0.1
  :diminish
  :config
  (counsel-projectile-mode))
#+END_SRC
* LSP-Related
#+BEGIN_SRC emacs-lisp :results none
(use-package lsp-mode ; LSP
  :diminish
  :hook (prog-mode . lsp-mode)
  :custom
  ;; Disable slow features
  (lsp-enable-file-watchers nil)
  (lsp-enable-folding nil)
  (lsp-enable-text-document-color nil)

  ;; Don't modify our code w/o permission
  (lsp-enable-indentation nil)
  (lsp-enable-on-type-formatting nil)
  :general
  (my-localleader-def
    "gr" #'(lsp-rename :which-key "rename with lsp")))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom (lsp-ui-doc-position 'bottom))

(use-package lsp-ivy
  :after (lsp-mode))

(use-package flycheck ; linting
  :diminish
  :hook (prog-mode . flycheck-mode)
  :custom
  (flycheck-display-errors-delay 0.25)
  :general
  ('normal
   "[q" #'flycheck-previous-error
   "]q" #'flycheck-next-error)
  (my-leader-def
    "fe" #'(flycheck-list-errors :which-key "list errors"))
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp :results none
(use-package rainbow-delimiters
  :diminish
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package highlight-numbers
  :hook ((prog-mode text-mode) . highlight-numbers-mode))

(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))

(use-package highlight-symbol ; highlight the symbol under point
  :diminish
  :hook (prog-mode . highlight-symbol-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))

(use-package paren
  :straight (:type built-in)
  :hook ((prog-mode text-mode) . show-paren-mode)
  :custom
  (show-paren-when-point-inside-paren t))
#+END_SRC
* Org
** Org
#+BEGIN_SRC emacs-lisp :results none
(use-package org
  :straight (:type built-in)
  :hook (kill-emacs . +org/tangle-config)
  :defer-incrementally
  (calendar find-func format-spec org-macs org-compat
            org-faces org-entities org-list org-pcomplete org-src
            org-footnote org-macro ob org org-clock org-agenda
            org-capture evil-org)
  :custom
  (org-id-locations-file (expand-file-name ".org-id-locations" my/etc-dir))
  (org-agenda-files '("~/org"))
  (org-directory "~/org")
  (org-default-notes-file (expand-file-name "notes.org/" org-directory ))
  (org-confirm-babel-evaluate nil)
  (org-startup-folded t)
  (org-M-RET-may-split-line nil)
  (org-log-done 'time)
  (org-tag-alist '(("@school" . ?s) ("@personal" . ?p) ("drill" . ?d) ("TOC" . ?t)))
  (org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p!)" "WAITING(w!)" "|" "CANCELLED(c@/!)" "DONE(d)")))
  :custom-face
  ;; No unnecessary background highlighting
  (org-block            ((t (:background "#282828"))))
  (org-block-begin-line ((t (:background "#282828"))))
  (org-block-end-line   ((t (:background "#282828"))))
  (org-level-1          ((t (:background "#282828"))))
  (org-quote            ((t (:background "#282828"))))
  ;; Gray out done headlines and text; strike-through the text
  (org-headline-done    ((t (:strike-through t :foreground "#7C6f64"))))
  (org-done             ((t (:foreground "#7C6f64"))))
  :general

  ('(normal insert) org-mode-map
   :prefix "C-c"
   ",v" #'org-redisplay-inline-images
   "v"  #'org-toggle-inline-images
   "t"  #'(org-todo             :which-key "todo")
   "s"  #'(org-sort             :which-key "sort")
   ",s" #'(org-schedule         :which-key "schedule")
   "d"  #'(org-deadline         :which-key "deadline")
   "e"  #'(org-export-dispatch  :which-key "export")
   "q"  #'(org-set-tags-command :which-key "add tags")
   "b"  #'(org-babel-tangle     :which-key "tangle file")
   "f"  #'(counsel-org-goto-all :which-key "find org headline"))

  ('normal org-mode-map
           "RET" #'org-open-at-point)

  ;; Vim keys calendar maps
  ('org-read-date-minibuffer-local-map
   ";" #'exit-minibuffer
   "M-h" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1)))
   "M-l" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1)))
   "M-j" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1)))
   "M-k" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1)))
   "M-H" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))
   "M-L" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1)))
   "M-J" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year 1)))
   "M-K" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year 1))))

  ;; Folding maps based on vim
  ('normal org-mode-map
           "zo" #'outline-show-subtree
           "zk" #'org-backward-element
           "zj" #'org-forward-element)

  ('(normal insert) org-mode-map
   ;; TODOS with M-;, headlines with C-;, add shift to do those above
   "C-M-;" #'my/org-insert-subheading
   "C-:"   #'my/org-insert-heading-above
   "C-;"   #'evil-org-org-insert-heading-respect-content-below
   "M-;"   #'evil-org-org-insert-todo-heading-respect-content-below
   "M-:"   #'my/org-insert-todo-above)
  :config
  (setq org-fontify-done-headline t))
#+END_SRC
** Org built-ins
#+BEGIN_SRC emacs-lisp :results none
(use-package org-agenda
  :straight (:type built-in)
  :general
  (my-leader-def
    "oa" #'(org-agenda :which-key "agenda"))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package org-src
  :straight (:type built-in)
  :defer t
  :diminish
  :custom
  (org-src-window-setup 'current-window))

(use-package org-capture
  :straight (:type built-in)
  :custom
  (org-capture-templates
   '(("t" "TODO entry"
      entry (file+headline "~/org/todo.org" "Miscellaneous")
      "* TODO %?\n %i\n %a")
     ("d" "org drill"
      entry (file+headline "~/org/notes.org" "Miscellaneous")
      "* %? :drill:")))
  :general
  (my-leader-def
    "oc" #'(org-capture :which-key "org capture")))

(use-package ol
  :straight (:type built-in)
  :general
  ('(normal insert) org-mode-map
   :prefix "C-c"
   ",l" #'(org-insert-link :which-key "insert link"))
  ('override
   :prefix "C-c"
   "l"  #'(org-store-link  :which-key "store link")))

(use-package ob-haskell
  :straight (:type built-in)
  :commands org-babel-execute:haskell)

(use-package ob-shell
  :straight (:type built-in)
  :commands org-babel-execute:sh)

(use-package ob-C
  :straight (:type built-in)
  :commands org-babel-execute:C)

(use-package ob-R
  :straight (:type built-in)
  :commands org-babel-execute:R)
#+END_SRC
** Non built-ins
#+BEGIN_SRC emacs-lisp :results none
(use-package org-drill
  :general
  ('override :prefix "C-c"
             ",d" #'org-drill))

(use-package org-pomodoro
  :general
  ("C-c p" #'org-pomodoro))

(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-hide-leading-stars t))

(use-package toc-org
  :hook ((org-mode markdown-mode) . toc-org-mode))

(use-package evil-org
  :diminish
  :hook (org-mode . evil-org-mode)
  :general
  ('(normal insert) evil-org-mode-map
   ;; Vim keys > arrow keys
   "M-h"   #'org-metaleft
   "M-l"   #'org-metaright
   "M-j"   #'org-metadown
   "M-k"   #'org-metaup
   "M-L"   #'org-shiftright
   "M-H"   #'org-shiftleft
   "M-J"   #'org-shiftdown
   "M-K"   #'org-shiftup))
#+END_SRC
* Windows, Buffers, Directory Management
** Dired
#+BEGIN_SRC emacs-lisp :results none
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-auto-revert-buffer) ; don't prompt to revert
  (dired-recursive-copies 'always)
  :general
  ('normal
   "-"  #'(dired-jump :which-key "open dired"))
  (my-leader-def
    "fd" #'(dired      :which-key "navigate to a directory"))
  :config
  (evil-collection-init 'dired))

(use-package dired-x
  :straight (:type built-in)
  :defer t) ; TODO hide ./ and ../
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp :results none
(use-package ace-window ; easily navigate windows with prefix M-o
  :custom
  (aw-keys '(?j ?k ?l ?s ?d ?s ?h ?a))
  :general
  ("M-o" #'ace-window))

(use-package golden-ratio
  :diminish
  :hook (window-setup . golden-ratio-mode)
  :custom
  (golden-ratio-auto-scale t))

(use-package winner ; Undo and redo window configs
  :straight (:type built-in)
  :defer 0.3
  :config
  (winner-mode)
  :general
  ('evil-window-map
   "u" #'winner-undo
   "r" #'winner-redo))
#+END_SRC
* Editing
** Smartparens
#+BEGIN_SRC emacs-lisp :results none
(use-package smartparens
  :diminish
  :defer 0.3
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  (sp-max-prefix-length 25)
  (sp-max-pair-length 4)
  (sp-escape-quotes-after-insert nil)
  (sp-show-pair-from-inside t)
  (sp-cancel-autoskip-on-backward-movement nil) ; quote pairs buggy otherwise
  :general
  ;; (my-localleader-def
  ;;   "s" '(hydra-smartparens/body :which-key "Smartparens"))

  ('normal
   ">" (general-key-dispatch #'evil-shift-right
         ")" #'sp-forward-slurp-sexp
         "(" #'sp-backward-barf-sexp)
   "<" (general-key-dispatch #'evil-shift-left
         ")" #'sp-forward-barf-sexp
         "(" #'sp-backward-barf-sexp))
  :config
  (smartparens-global-mode)
  (require 'smartparens-config) ; config for many languages
  (sp-local-pair 'org-mode "'" nil :actions nil)) ; don't pair ' in elisp mode

;; (defhydra hydra-smartparens () ; TODO delete and remap these for normal mode
;;   ;; Movement
;;   ("l" sp-forward-sexp "next pair")
;;   ("h" sp-backward-sexp "previous pair")
;;   ("j" sp-down-sexp "down")
;;   ("J" sp-backward-down-sexp "backward down")
;;   ("k" sp-up-sexp "up")
;;   ("K" sp-backward-up-sexp "up")
;;   ("n" sp-next-sexp "next")
;;   ("p" sp-previous-sexp "previous")

;;   ("H" sp-beginning-of-sexp "beginning")
;;   ("L" sp-end-of-sexp "end")
;;   ("d" sp-delete-sexp "delete")
;;   ("D" sp-kill-whole-line "delete line")
;;   ("t" sp-transpose-sexp "transpose")

;;   ("s" sp-forward-slurp-sexp "slurp")
;;   ("S" sp-backward-slurp-sexp "backward slurp")
;;   ("b" sp-forward-barf-sexp "barf")
;;   ("B" sp-backward-barf-sexp "backward barf")

;;   ("v" sp-split-sexp "split pair")
;;   ("u" sp-join-sexp "join pair")

;;   ("p" sp-add-to-previous-sexp "add to previous pair")
;;   ("n" sp-add-to-next-sexp "add to next pair")))

(use-package evil-smartparens ; Make evil commands preserve balance of parentheses
  :hook (prog-mode . evil-smartparens-mode)
  :diminish)
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package undo-tree ; Persistent Undos
  :diminish
  :custom
  (undo-limit 10000)
  (undo-tree-auto-save-history t)
  ;; (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (undo-tree-history-directory-alist (list (cons "." (expand-file-name "undo/" my/etc-dir))))
  :general
  (my-leader-def
    "fu" #'(undo-tree-visualize :which-key "undo")))

(use-package format-all
  :custom
  (+format-with-lsp t)
  :general
  (my-leader-def
    :states 'normal
    "=" #'(+format/buffer :which-key "format"))
  (my-leader-def
    :states 'visual
    "=" #'+format/region))

(use-package expand-region
  :general
  ("M--" #'er/expand-region))

(use-package move-text
  :general
  ('normal
   "]e" #'move-text-down
   "[e" #'move-text-up))
#+END_SRC
* System
** Terminals/shells
#+BEGIN_SRC emacs-lisp :results none
(use-package vterm
  :custom
  (vterm-kill-buffer-on-exit t)
  :general
  (my-leader-def
    "o"   '(:ignore t          :which-key "Open")
    "ot"  #'(vterm              :which-key "open vterm")
    "ovt" #'(vterm-other-window :which-key "open vterm in vsplit")))

(use-package eshell
  :straight (:type built-in)
  :hook ((eshell-mode . smartparens-mode)
         (eshell-first-time-mode . +eshell/init-keymaps)
         (eshell-post-command . +eshell/init-aliases-h))
  :custom
  (eshell-directory-name (expand-file-name "eshell/" my/etc-dir))
  :general
  (my-leader-def
    "oe" #'eshell)
  :config
  (evil-collection-init 'eshell)

  ;; Aliases
  (advice-add #'eshell-write-aliases-list :override #'ignore))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
(use-package restart-emacs
  :general
  (my-leader-def
    "e"  '(:ignore t     :which-key "Emacs Commands")
    "e SPC r" #'(restart-emacs :which-key "restart emacs"))
  :custom
  (restart-emacs-restore-frames t)) ; Restore frames on restart

(use-package helpful
  :general
  ('normal
   "gh" #'helpful-at-point)
  ('normal helpful-mode-map
           "q" #'quit-window)
  ([remap describe-command] #'helpful-command
   [remap describe-key]     #'helpful-key
   [remap describe-symbol]  #'helpful-symbol)
  :config
  (evil-collection-inhibit-insert-state 'helpful-mode-map))

(use-package gcmh ; Garbage collect in idle time
  :defer 0.4
  :commands gcmh-idle-garbage-collect
  :diminish
  :custom
  (gcmh-idle-delay 10)
  (gcmh-high-cons-threshold 16777216)
  :config
  (gcmh-mode)
  (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect))

(use-package keyfreq
  :custom
  (keyfreq-excluded-commands
   '(org-self-insert-command
     self-insert-command))
  :general
  (my-leader-def
    "fc" #'(keyfreq-show :which-key "show command frequency"))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

(use-package dumb-jump
  :defer t
  :custom
  (dumb-jump-default-project "~/code")
  (dumb-jump-selector 'ivy)
  (dumb-jump-prefer-searcher 'rg)
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

(use-package tramp
  :straight (:type built-in)
  :defer t
  :custom
  (tramp-autosave-directory    (expand-file-name "tramp/auto-save/" my/etc-dir))
  (tramp-persistency-file-name (expand-file-name "tramp/persistency.el" my/etc-dir)))
#+END_SRC
* Filetype Specific
** PDF
#+BEGIN_SRC emacs-lisp :results none
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query)
  (evil-collection-pdf-setup))
#+END_SRC
** C family
#+BEGIN_SRC emacs-lisp :results none
(use-package cc-mode
  :straight (:type built-in)
  :custom
  (c-basic-offset 4)
  (c-default-style "linux")
  :general
  ('c-mode-base-map
   "M-;" #'my/append-semicolon))
#+END_SRC
** Statistics (R)
#+BEGIN_SRC emacs-lisp :results none
(use-package ess
  :hook ((ess-r-mode . +ess/company-mode)
         (ess-r-mode . prog-mode)) ; ESS doesn't load prog-mode by default
  :general
  ('(normal insert) ess-mode-map
   "C-;" #'ess-eval-line
   "M-;" #'ess-eval-buffer)

  ('visual ess-mode-map
           "C-;" #'ess-eval-region)

  ('(normal insert) ess-mode-map
   :prefix "C-c"
   "o" #'R
   "b" #'(ess-eval-buffer   :which-key "eval R buffer")
   "r" #'(ess-eval-region   :which-key "eval R region")
   "f" #'(ess-eval-function :which-key "eval R function")
   "h" #'(ess-doc-map       :which-key "R help")))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp :results none
(use-package pandoc-mode
  :hook (markdown-mode . pandoc-mode)
  :general
  (:prefix "C-c"
           "c" #'(pandoc-main-hydra/body :which-key "pandoc")))
#+END_SRC
* Functions
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun my/org-insert-subheading ()
  (interactive)
  (evil-append-line 1)
  (org-insert-subheading 1))

;;;###autoload
(defun my/org-insert-heading-above ()
  (interactive)
  (evil-append-line 1)
  (move-beginning-of-line nil)
  (org-insert-heading))

;;;###autoload
(defun my/org-insert-todo-above ()
  (interactive)
  (evil-append-line 1)
  (move-beginning-of-line nil)
  (org-insert-todo-heading 1))

;;;###autoload
(defun my/save-and-kill-buffer ()
  (interactive)
  (save-buffer)
  (kill-this-buffer))

;;;###autoload
(defun my/split-line ()
  (interactive)
  (newline)
  (indent-according-to-mode))

;;;###autoload
(defun my/comment-until-end-of-line () ;; TOOD fix
  (interactive)
  (my/split-line)
  (evil-commentary-line)
  (evil-previous-line 2)
  (join-line))

;;;###autoload
(defun my/eshell-clear ()
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

;;;###autoload
(defun my/kill-window-and-buffer ()
  (interactive)
  (kill-this-buffer)
  (evil-quit))

;;;###autoload
(defun my/append-semicolon()
  (interactive)
  (save-excursion
    (call-interactively 'move-end-of-line)
    (insert ";")))
#+END_SRC
** Format

Entirely from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +format--org-region (beg end)
  "Reformat the region within BEG and END.
    If nil, BEG and/or END will default to the boundaries of the src block at point."
  (let ((element (org-element-at-point)))
    (save-excursion
      (let* ((block-beg (save-excursion
                          (goto-char (org-babel-where-is-src-block-head element))
                          (line-beginning-position 2)))
             (block-end (save-excursion
                          (goto-char (org-element-property :end element))
                          (skip-chars-backward " \t\n")
                          (line-beginning-position)))
             (beg (if beg (max beg block-beg) block-beg))
             (end (if end (min end block-end) block-end))
             (lang (org-element-property :language element))
             (major-mode (org-src-get-lang-mode lang)))
        (if (eq major-mode 'org-mode)
            (user-error "Cannot reformat an org src block in org-mode")
          (+format/region beg end))))))

;;;###autoload
(defun +format/buffer ()
  "Reformat the current buffer using LSP or `format-all-buffer'."
  (interactive)
  (if (and (eq major-mode 'org-mode)
           (org-in-src-block-p t))
      (+format--org-region nil nil)
    (call-interactively
     (cond ((and +format-with-lsp
                 (bound-and-true-p lsp-mode)
                 (lsp-feature? "textDocument/formatting"))
            #'lsp-format-buffer)
           (#'format-all-buffer)))))

;;;###autoload
(defun +format/region (beg end)
  "Runs the active formatter on the lines within BEG and END.
  WARNING: this may not work everywhere. It will throw errors if the region
  contains a syntax error in isolation. It is mostly useful for formatting
  snippets or single lines."
  (interactive "rP")
  (if (and (eq major-mode 'org-mode)
           (org-in-src-block-p t))
      (+format--org-region beg end)
    (cond ((and +format-with-lsp
                (bound-and-true-p lsp-mode)
                (lsp-feature? "textDocument/rangeFormatting"))
           (call-interactively #'lsp-format-region))
          ((and +format-with-lsp
                (bound-and-true-p eglot--managed-mode)
                (eglot--server-capable :documentRangeFormattingProvider))
           (call-interactively #'eglot-format))
          ((save-restriction
             (narrow-to-region beg end)
             (let ((+format-region-p t))
               (+format/buffer)))))))
#+END_SRC
** Mode specific
*** Org
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +org/tangle-config ()
  (find-file config-org)
  (org-babel-tangle-file config-org config-el))
#+END_SRC
*** Eshell
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +eshell/init-keymaps ()
  (general-def '(insert normal) eshell-mode-map
    "C-j" #'eshell-next-matching-input-from-input
    "C-k" #'eshell-previous-matching-input-from-input
    "C-l" #'my/eshell-clear
    "C-c" #'eshell-interrupt-process))

;;;###autoload
(defun +eshell/init-aliases-h ()
  (dolist (var '(("s" "sudo")

                 ("l" "ls -AF")
                 ("alias" "ll ls -lF")
                 ("alias" "la ls -lAF")

                 ("alias" "g git")
                 ("gs" "git status")
                 ("alias" "gl git log")
                 ("alias" "ga git add")
                 ("alias" "gaa git add -A")
                 ("alias" "gcam git commit -a m")
                 ("alias" "gr git reset")
                 ("alias" "grs git reset --soft HEAD~1")
                 ("alias" "gp git push -u origin master")))
    (add-to-list 'eshell-command-aliases-list var)))
#+END_SRC
*** ESS-R
#+BEGIN_SRC emacs-lisp :results none
;;;###autoload
(defun +ess/company-mode ()
  (set (make-local-variable 'company-backends)
       '((company-R-args
          company-R-objects
          company-dabbrev-code
          company-files
          company-yasnippet))))
#+END_SRC
