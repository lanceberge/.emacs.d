* Early-Init
 #+BEGIN_SRC emacs-lisp :results none :tangle early-init.el
   ;;; -*- lexical-binding: t; -*-
   (setq gc-cons-threshold most-positive-fixnum)

   (setq package-enable-at-startup nil)
   (advice-add #'package--ensure-init-file :override #'ignore)

   (push '(menu-bar-lines . 0) default-frame-alist)
   (push '(tool-bar-lines . 0) default-frame-alist)
   (push '(vertical-scroll-bars) default-frame-alist)

   (setq emacs-load-start-time (current-time))

   (set-face-attribute 'default nil
                       :family "DejaVu Sans Mono"
                       :height 110
                       :weight 'normal
                       :width 'normal)

   (setq frame-inhibit-implied-resize t)

   (advice-add #'x-apply-session-resources :override #'ignore)

   ;; Boostrap straight.el
   (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
         (goto-char (point-max))
         (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))

   ;; use-package uses straight.el
   (setq straight-use-package-by-default t
         straight-repository-branch "develop"
         straight-check-for-modifications nil
         straight-vc-git-default-clone-depth 1
         straight-fix-org nil)

   (straight-use-package 'use-package)

   (use-package gruvbox-theme
     :config
     (load-theme 'gruvbox t))
 #+END_SRC
* Init
#+BEGIN_SRC emacs-lisp :tangle init.el :results none
  ;;; -*- lexical-binding: t -*-
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)

  (defconst config-org (expand-file-name "README.org" user-emacs-directory))
  (defconst config-el  (expand-file-name "config.el" user-emacs-directory))

  (unless (file-exists-p config-el)
    (require 'org)
    (org-babel-tangle-file config-org config-el))

  (load-file config-el)

  (when (require 'time-date nil t)
      (message "Emacs startup time: %.2f seconds."
		 (time-to-seconds (time-since emacs-load-start-time))))
#+END_SRC
* Auto-Tangle
Taken from: [[https://github.com/KaratasFurkan/.emacs.d]]
#+BEGIN_SRC emacs-lisp :results none
  (defun tangle-config ()
    "Export code blocks from the literate config file
  asynchronously."
    (interactive)
    (let* ((tangle-config (format "(org-babel-tangle nil \"%s\")" config-el))
	   (process (start-process
		     "tangle-config" nil
		     "emacs" config-org "--batch" "--eval" tangle-config))
	   (filter (defun echo-process-output (process output)
		     "Echo process output."
		     (message (s-trim output)))))
      (set-process-filter process filter)))

  (defun add-local-hook (hook function)
    (add-hook hook function nil t))

  (add-hook 'org-mode-hook
	    (lambda ()
	      (if (equal (buffer-file-name) config-org)
		  (add-local-hook 'after-save-hook 'tangle-config))))
#+END_SRC
* Initial Settings
  
Mostly taken from Doom Emacs

#+BEGIN_SRC emacs-lisp :results none
        ;;; -*- lexical-binding: t; -*-
  (setq load-prefer-newer noninteractive

        ;; Cleaner startup
        inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message user-login-name
        inhibit-default-init t
        initial-scratch-message nil
        initial-major-mode 'fundamental-mode ; start in an empty mode
        menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil

        locale-coding-system 'utf-8;
        ad-redefinition-action 'accept ; disable warnings from legacy advice system
        message-log-max 5000 ; longer number of max messages
        help-window-select t ; bring point to help menus when you open them
        command-line-x-option-alist nil ; less command line options to process on startup
        ring-bell-function 'ignore

        kill-buffer-query-functions nil
        idle-update-delay 1.0 ; slow down how often emacs updates its ui
        auto-mode-case-fold nil
        inhibit-compacting-font-caches t ; inhibit font compacting
        highlight-nonselected-windows nil
        ffap-machine-p-known 'reject ; don't ping things that look like domain names
        bidi-inhibit-bpa t
        fast-but-imprecise-scrolling t ; faster scrolling over unfontified regions

        ;; User Settings
        user-full-name "Lance Bergeron"
        user-mail-address "bergeron.lance6@gmail.com"

        ;; Scrolling
        scroll-conservatively 1000
        scroll-margin 4
        scroll-step 1

        ;; General
        delete-old-versions t
        indent-tabs-mode nil
        show-trailing-whitespace t
        apropos-do-all t ; more extensive apropos searches
        make-backup-files nil
        auto-save-default nil
        kill-do-not-save-duplicates t) ; no duplicates in kill ring

  (advice-add #'tty-run-terminal-initialization :override #'ignore)

  (fset 'yes-or-no-p 'y-or-n-p)                ; y or n prompt, not yes or no

  (menu-bar-display-line-numbers-mode 'visual) ; relative line numbers
  (global-display-line-numbers-mode 1)         ; always show line numbers

  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216
                    gc-cons-percentage 0.1
                    file-name-handler-alist default-file-name-handler-alist)))
                    ;; gcmh-idle-delay 5)))

  ;; Disable bidirectional text rendering for performance
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right
                cursor-in-non-selected-windows nil
                indent-tabs-mode nil)

  ;; Keeping ~/.emacs.d organized
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
* Keymap Management
#+BEGIN_SRC emacs-lisp :results none
  (use-package general ; unified way to map keybindings; works with :general in use-package
    :demand t
    :config
    (general-create-definer my-leader-def
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC")

    (general-create-definer my-localleader-def
      :states '(normal visual insert emacs)
      :prefix ","
      :non-normal-prefix "C-,")

    (my-leader-def
      "f"  '(:ignore t                    :which-key "Find")
      "fm" '(general-describe-keybindings :which-key "list keybindings")))

  (use-package which-key ; show keybindings following when a prefix is pressed
    :diminish
    :defer 0.1
    :custom
    (which-key-sort-order #'which-key-prefix-then-key-order)
    (which-key-min-display-lines 6)
    (which-key-add-column-padding 1)
    (which-key-sort-uppercase-first nil)
    :config
    (which-key-mode))

  (use-package hydra
    :defer t)

  (use-package diminish
    :demand t
    :config
    (diminish 'eldoc-mode))
#+END_SRC
* Built-in Packages
#+BEGIN_SRC emacs-lisp :results none
  (use-package paren
    :straight (:type built-in)
    :hook (prog-mode . show-paren-mode)
    :custom
    (show-paren-when-point-inside-paren t))

  (use-package dired
    :straight (:type built-in)
    :general
    (my-leader-def
      "-"  '(dired-jump :which-key "open dired")
      "fd" '(dired      :which-key "navigate to a directory")))
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp :results none
  (use-package evil
    :after general
    :demand t
    :diminish
    :hook (after-init . evil-mode)
    :commands
    (evil-quit
     evil-save-modified-and-close)
    :custom
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    (evil-search-wrap t)
    (evil-want-keybinding nil)
    :general
    ('evil-ex-completion-map ";" 'exit-minibuffer) ; use ; to complete : vim commands

    ('normal
     "gm" 'evil-execute-macro ; run vim macros)
     "zR" 'evil-open-folds
     "zM" 'evil-close-folds)

    ('(normal visual motion)
     ";" 'evil-ex ; switch ; and :
     ;; "M-;" 'evil-repeat-find-char
     ;; "M-," 'evil-repeat-find-char-reverse
     "H" 'evil-first-non-blank
     "L" 'evil-end-of-line)

    ;; Evil-avy
    ('normal :prefix "g"
     "o" '(evil-avy-goto-char-2     :which-key "2-chars")
     "O" '(evil-avy-goto-char-timer :which-key "timer"))

    (my-leader-def
      "ft" '(evil-avy-goto-char-timer           :which-key "avy timer")
      "bl" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer")
      "bS" '(evil-write-all                     :which-key "write all buffers"))

    :config
    (general-def 'evil-window-map
      "d" 'evil-quit ; delete window
      "q" 'evil-save-modified-and-close)) ; quit and save window
#+END_SRC
* Evil-Related
** Evil-Collection
#+BEGIN_SRC emacs-lisp :results none
  ;; Evil everywhere
  (use-package evil-collection
    :after evil
    :demand t
    :custom
    (evil-collection-calendar-want-org-bindings t)
    (evil-collection-want-unimpaired-p t)
    (evil-collection-setup-minibuffer t)
    (evil-collection-mode-list
     '(minibuffer
       ivy
       company
       vterm
       dired
       eshell))
    :config
    (evil-collection-init))
#+END_SRC
** Extra operators/motions
#+BEGIN_SRC emacs-lisp :results none
  ;; 2 character searches with s (ala vim-sneak)
  (use-package evil-snipe
    :diminish evil-snipe-local-mode
    :hook ((prog-mode text-mode) . evil-snipe-override-local-mode)
    :custom
    (evil-snipe-show-prompt nil)
    (evil-snipe-skip-leading-whitespace nil)
    :config
    (evil-snipe-local-mode)
    (general-def 'motion
      "M-;" 'evil-snipe-repeat
      "M-," 'evil-snipe-repeat-reverse))

  ;; s as an operator for surrounding
  (use-package evil-surround
    :diminish
    :hook ((prog-mode text-mode) . evil-surround-mode))

  ;; gc as an operator to comment
  (use-package evil-commentary
    :diminish
    :hook ((prog-mode org-mode) . evil-commentary-mode))

  ;; increment/decrement numbers
  (use-package evil-numbers
    :general
    (my-localleader-def
      "n"  '(:ignore t              :which-key "Evil-Numbers")
      "nu" '(evil-numbers/inc-at-pt :which-key "increment")
      "nd" '(evil-numbers/dec-at-pt :which-key "decrement")))

  ;; gl as an operator to left-align, gL to right-align
  (use-package evil-lion
    :diminish
    :hook ((prog-mode text-mode) . evil-lion-mode))

  ;; navigate matching blocks of code with %
  (use-package evil-matchit
    :diminish
    :hook ((prog-mode text-mode) . evil-matchit-mode))

  ;; exchange text selected with gx
  (use-package evil-exchange
    :hook ((prog-mode text-mode) . evil-exchange-install))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp :results none
  ;; jk to leave insert mode
  (use-package evil-escape
    :diminish
    :hook ((prog-mode text-mode) . evil-escape-mode)
    :custom
    (evil-escape-key-sequence "jk")
    (evil-escape-delay 0.25)
    (evil-escape-excluded-major-modes '(evil-magit-mode org-agenda-mode))
    (evil-escape-excluded-states '(normal visual emacs)))

  ;; code folding
  (use-package origami
    :diminish
    :hook ((prog-mode text-mode) . origami-mode)
    :general
    ('normal
     "zm" 'origami-close-node-recursively
     "zr" 'origami-open-node-recursively
     ;; "zM" 'origami-close-all-nodes
     ;; "zR" 'origami-open-all-nodes
     "zj" 'origami-next-fold
     "zk" 'origami-previous-fold))

  ;; multiple cursors
  (use-package evil-mc
    :diminish
    :hook ((prog-mode text-mode) . evil-mc-mode))

  ;; evil port of targets.vim
  (use-package targets
    :straight (targets :type git :host github :repo "noctuid/targets.el")
    :defer t
    :config
    (targets-setup t))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp :results none
  (use-package flx
    :after ivy) ; fuzzy sorting for ivy

  (use-package ivy
    :diminish
    :defer 0.1
    :custom
    (ivy-re-builders-alist '((t . ivy--regex-fuzzy))) ;; TODO configure counsel-rg, swiper, counsel-projectile-rg
    :config
    (ivy-mode))

  (use-package counsel
    :after ivy
    :diminish
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    (my-leader-def
      "."   '(counsel-find-file      :which-key "find file")
      "SPC" '(ivy-switch-buffer      :which-key "switch buffer")
      "fr"  '(counsel-recentf        :which-key "find recent files")
      "fi"   '(counsel-imenu          :which-key "imenu")
      "fg"  '(counsel-git            :which-key "git files")
      "fG"  '(counsel-git-grep       :which-key "git grep")
      "ff"  '(counsel-rg             :which-key "ripgrep"))
    :config
    (counsel-mode))

  (use-package swiper
    :general
    ('normal
     [remap evil-search-forward]  'swiper
     [remap evil-search-backward] 'swiper-backward)
    (my-leader-def
      "fb" '(swiper-multi :which-key "swiper in buffer")
      "fB" '(swiper-all   :which-key "swiper in all buffers")))
#+END_SRC
* Vterm
#+BEGIN_SRC emacs-lisp :results none
  (use-package vterm
    :custom
    (vterm-kill-buffer-on-exit t)
    :general
    (my-leader-def
      "o"   '(:ignore t          :which-key "Open")
      "ot"  '(vterm              :which-key "open vterm")
      "ovt" '(vterm-other-window :which-key "open vterm in vsplit")))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp :results none
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode)
    :custom (yas-snippet-dirs '("~/.emacs.d/snippets"))
    :general
    (my-localleader-def
      "y"  '(:ignore t           :which-key "Yasnippet")
      "yi" '(yas-insert-snippet  :which-key "insert snippet")
      "yn" '(yas-new-snippet     :which-key "new snippet")
      "yl" '(yas-describe-tables :which-key "list snippets")))

  (use-package yasnippet-snippets
    :defer t
    :after yasnippet)

  (use-package auto-yasnippet
    :general
    (my-localleader-def
      "yc" '(aya-create :which-key "create aya snippet")
      "ye" '(aya-expand :which-key "expand aya snippet")))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp :results none
  (use-package magit
    :custom
    (magit-auto-revert-mode nil)
    (magit-save-repository-buffers nil)
    :general
    (my-leader-def ;; TODO unmap some of these
      "g"   '(:ignore t                  :which-key "Git")
      "gs"  '(magit-status               :which-key "status")
      "gb"  '(magit-branch-checkout      :which-key "checkout branch")
      ;; "gB"  '(magit-blame-addition       :which-key "blame")
      ;; "gc"  '(magit-clone                :which-key "clone")
      ;; "gd"  '(magit-file-delete          :which-key "delete file")
      ;; "gF"  '(magit-fetch                :which-key "fetch")
      ;; "gG"  '(magit-status-here          :which-key "status here")
      "gl"  '(magit-log                  :which-key "log")
      "gS"  '(magit-stage-file           :which-key "stage file")
      "gU"  '(magit-unstage-file         :which-key "unstage file")
      "gn"  '(:ignore t                  :which-key "New")
      "gnb" '(magit-branch-and-checkout  :which-key "branch")
      "gnc" '(magit-commit-create        :which-key "commit")
      "gnf" '(magit-commit-fixup         :which-key "fixup commit")
      ;; "gnd" '(magit-init                 :which-key "init")
      "gf"  '(:ignore t                  :which-key "Find")
      "gfc" '(magit-show-commit          :which-key "show commit")
      "gff" '(magit-find-file            :which-key "file")
      "gfg" '(magit-find-git-config-file :which-key "git config file")))
      ;; "gfr" '(magit-list-repositories    :which-key "repository")
      ;; "gfs" '(magit-list-submodules)     :which-key "submodule"))

  (use-package evil-magit
    :after magit
    :custom
    (evil-magit-state 'normal)
    (evil-magit-use-z-for-folds t))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp :results none
  (use-package projectile
    :defer 0.1
    :diminish
    :custom
    (projectile-auto-discover nil)
    (projectile-project-search-path '("~/code/" "~/.emacs.d/"))
    :general
    (my-leader-def
      "p" '(projectile-command-map :which-key "Projectile")))
  ;; :config
  ;; (projectile-mode +1))

  (use-package counsel-projectile
    :after (counsel projectile)
    :diminish
    :config
    (counsel-projectile-mode))
#+END_SRC
* LSP-Related
#+BEGIN_SRC emacs-lisp :results none
  ;; autocomplete
  (use-package company
    :diminish
    :hook (prog-mode . company-mode)
    :custom
    (company-show-numbers t)
    (company-backends '(company-capf
                        company-files
                        company-keywords
                        company-yasnippet))
    :general
    ('company-active-map "C-w" nil) ; don't override evil C-w
    ('insert
     "C-n" 'company-complete)) ; manual completion with C-n

  (use-package company-flx
    :after company
    :hook (company-mode . company-flx-mode))

  ;; LSP
  (use-package lsp-mode
    :diminish
    :hook prog-mode
    :general
    (my-localleader-def
      "gr" 'lsp-rename))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy
    :after (lsp-mode ivy))

  ;; linting
  (use-package flycheck
    :diminish
    :hook (lsp-mode . flycheck-mode)
    :general
    ('normal
     "[q" 'flycheck-previous-error
     "]q" 'flycheck-next-error)
    (my-leader-def
      "fe" '(flycheck-list-errors :which-key "list errors"))
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp :results none
  (use-package rainbow-delimiters
    :diminish
    :hook ((prog-mode) . rainbow-delimiters-mode))

  (use-package highlight-numbers
    :hook ((prog-mode text-mode) . highlight-numbers-mode))
    
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp :results none
  (use-package smartparens
    :diminish
    :commands
    (sp-forward-sexp
     sp-backward-sexp
     sp-down-sexp
     sp-backward-down-sexp
     sp-up-sexp
     sp-backward-up-sexp
     sp-next-sexp
     sp-previous-sexp
     sp-beginning-of-sexp
     sp-end-of-sexp
     sp-delete-sexp
     sp-kill-whole-line
     sp-transpose-sexp
     sp-forward-slurp-sexp
     sp-backward-slurp-sexp
     sp-backward-barf-sexp
     sp-forward-slurp-sexp
     sp-fowrard-barf-sexp
     sp-backward-barf-sexp
     sp-split-sexp
     sp-join-sexp
     sp-add-to-previous-sexp
     sp-add-to-next-sexp)
    :custom
    (sp-highlight-pair-overlay nil)
    (sp-highlight-wrap-overlay nil)
    (sp-highlight-wrap-tag-overlay nil)
    (sp-max-prefix-length 25)
    (sp-max-pair-length 4)
    :hook
    (after-init . smartparens-global-mode)
    (prog-mode . smartparens-strict-mode)
    :general
    (my-localleader-def
      "s" '(hydra-smartparens/body :which-key "Smartparens"))
    :config
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil) ; don't pair ' in elisp mode

    (defhydra hydra-smartparens ()
      ;; Movement
      ("l" sp-forward-sexp "next pair")
      ("h" sp-backward-sexp "previous pair")
      ("j" sp-down-sexp "down")
      ("J" sp-backward-down-sexp "backward down")
      ("k" sp-up-sexp "up")
      ("K" sp-backward-up-sexp "up")
      ("n" sp-next-sexp "next")
      ("p" sp-previous-sexp "previous")

      ("H" sp-beginning-of-sexp "beginning")
      ("L" sp-end-of-sexp "end")
      ("d" sp-delete-sexp "delete")
      ("D" sp-kill-whole-line "delete line")
      ("t" sp-transpose-sexp "transpose")

      ("s" sp-forward-slurp-sexp "slurp")
      ("S" sp-backward-slurp-sexp "backward slurp")
      ("b" sp-forward-barf-sexp "barf")
      ("B" sp-backward-barf-sexp "backward barf")

      ("v" sp-split-sexp "split pair")
      ("u" sp-join-sexp "join pair")

      ("p" sp-add-to-previous-sexp "add to previous pair")
      ("n" sp-add-to-next-sexp "add to next pair")))



  ;;   ;; Make vim change, delete, etc. commands preserve balance of parentheses
  (use-package evil-smartparens
    :hook (smartparens-strict-mode . evil-smartparens-mode)
    :diminish
    :general
    ('normal
     ">" (general-key-dispatch 'evil-shift-right
           ")" 'sp-forward-slurp-sexp
           "(" 'sp-backward-barf-sexp)
     "<" (general-key-dispatch 'evil-shift-left
           ")" 'sp-forward-barf-sexp
           "(" 'sp-backward-barf-sexp)))
#+END_SRC
* Org
** Org
#+BEGIN_SRC emacs-lisp :results none
  (use-package org
    :straight (:type built-in)
    :general
    ("C-c l" '(org-store-link :which-key "store link") ;; TODO vimify mappings
     "C-c c" '(org-capture    :which-key "capture")
     "C-c s" '(org-sort       :which-key "sort")
     "C-c a" '(org-agenda     :which-key "org agenda"))
    (my-leader-def
      "oa"    '(org-agenda :which-key "org agenda"))
    :custom
    (org-agenda-files '("~/org"))
    (org-directory "~/org")
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-confirm-babel-evaluate nil)
    (org-src-block-faces nil)
    (org-startup-folded t)
    (org-M-RET-may-split-line nil)
    (org-log-done 'time)
    (org-tag-alist '(("@school" . ?s) ("@personal" . ?p)))
    (org-src-window-setup 'current-window)
    (org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p!)" "WAITING(w!)" "|" "CANCELLED(c@/!)" "DONE(d)")))
    :config
    (setq org-fontify-done-headline t)
    ;; No highlighting behind src blocks
    (dolist (face '(org-block
                    org-block-begin-line
                    org-block-end-line
                    org-level-1
                    org-quote))
      (set-face-attribute face nil :background
                          (color-darken-name
                           (face-attribute 'default :background) 0)))

    (set-face-attribute 'org-headline-done nil :strike-through t :foreground "#7c6f64")
    (set-face-attribute 'org-done nil :foreground "#7c6f64")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell   . t)
       (haskell . t))))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Evil-Org
#+BEGIN_SRC emacs-lisp :results none
  (use-package evil-org
    :diminish
    :hook (org-mode . evil-org-mode)
    :general
    ('org-read-date-minibuffer-local-map
     "M-h" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1)))
     "M-l" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1)))
     "M-j" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1)))
     "M-k" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1)))
     "M-H" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))
     "M-L" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1)))
     "M-J" (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year 1)))
     "M-K" (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year 1))))
    :config
    (evil-org-set-key-theme)
    (general-def '(normal insert) evil-org-mode-map
      "M-h" 'org-metaleft
      "M-l" 'org-metaright
      "M-L" 'org-shiftright
      "M-H" 'org-shiftleft
      "M-J" 'org-shiftdown
      "M-K" 'org-shiftup
      "C-O" 'my/org-insert-subheading
      "C-o" (lambda () (interactive) (evil-org-org-insert-heading-respect-content-below))
      "C-M-o" 'my/org-insert-heading-above
      "M-o" 'evil-org-org-insert-todo-heading-respect-content-below
      "M-O" 'my/org-insert-todo-above)
    (require 'evil-org-agenda) ;; TODO add org agenda hook
    (evil-org-agenda-set-keys))
#+END_SRC
* Windows
#+begin_SRC emacs-lisp :results none
  ;; easily navigate windows with prefix M-i
  (use-package ace-window
    :general
    ("M-i" 'ace-window))

  (use-package golden-ratio
    :diminish
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-auto-scale t))
#+END_SRC
* Miscellaneous
** Editing
#+BEGIN_SRC emacs-lisp :results none
  ;; Persistent Undos
  (use-package undo-tree
    :defer t
    :diminish
    :custom
    (undo-limit 10000)
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

  (use-package format-all
    :general
    (my-leader-def
      "=" '(format-all-buffer :which-key "format")))

  (use-package expand-region
    :general
    ("M--" 'er/expand-region))

  (use-package move-text
    :general
    ('normal
     "]e" 'move-text-down
     "[e" 'move-text-up))
#+END_SRC
** System
#+BEGIN_SRC emacs-lisp :results none
  (use-package restart-emacs
    :general
    (my-leader-def
      "e"  '(:ignore t     :which-key "Emacs Commands")
      "er" '(restart-emacs :which-key "restart emacs"))
    :custom
    (restart-emacs-restore-frames t)) ; Restore frames on restart

  (use-package smex
    :after ivy)

  (use-package helpful
    :general
    ('normal
     "gh" 'helpful-at-point)
    ('normal helpful-mode-map
             "q" 'quit-window)
    ([remap describe-command] 'helpful-command
     [remap describe-key] 'helpful-key
     [remap describe-symbol] 'helpful-symbol)
    :config
    (evil-collection-inhibit-insert-state 'helpful-mode-map))

  ;; Garbage collect in idle time
  (use-package gcmh
    :hook (after-init . gcmh-mode)
    :commands gcmh-idle-garbage-collect
    :diminish
    :custom
    (gcmh-idle-delay 10)
    (gcmh-high-cons-threshold 16777216)
    :config
    (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect))

  (use-package keyfreq
    :defer t
    :custom
    (keyfreq-excluded-commands
     '(org-self-insert-command
       self-insert-command
       evil-next-line
       evil-previous-line
       execute-extended-command))
    :general
    (my-leader-def
      "fc" '(keyfreq-show :which-key "show command frequency"))
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp :results none
  ;;;###autoload
  (defun my/org-insert-subheading ()
    (interactive)
    (evil-append-line 1)
    (org-insert-subheading 1))

  ;;;###autoload
  (defun my/org-insert-heading-above ()
    (interactive)
    (evil-append-line 1)
    (move-beginning-of-line nil)
    (org-insert-heading))

  ;;;###autoload
  (defun my/org-insert-todo-above ()
    (interactive)
    (evil-append-line 1)
    (move-beginning-of-line nil)
    (org-insert-todo-heading 1))

  ;;;###autoload
  (defun my/save-and-kill-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
    
  ;;;###autoload
  (defun my/split-line ()
    (interactive)
    (newline)
    (indent-according-to-mode))

  ;;;###autoload
  (defun my/comment-until-end-of-line () ;; TOOD fix
    (interactive)
    (my/split-line)
    (evil-commentary-line)
    (evil-previous-line 2)
    (join-line))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp :results none
  (general-def 'evil-window-map
    "Q" '(save-buffers-kill-emacs :which-key "save buffers & quit emacs"))

  (my-leader-def
    "h" (general-simulate-key "C-h" :which-key "Help")
    ;; Windows
    ";"  '(shell-command            :which-key "shell command")
    "w"  '(:ignore t                :which-key "Windows")
    "w"   (general-simulate-key "C-w") ; window command
    ;; Buffers TODO make hydra
    "b"  '(:ignore t                :which-key "Buffers")
    "bs" '(save-buffer              :which-key "write file")
    "bd" '(kill-this-buffer         :which-key "delete buffer")
    "bq" 'save-and-kill-buffer)

  (general-def 'normal
    "gs" 'my/split-line
    "gS" (lambda () (interactive) (my/split-line) (move-text-up)) ;; split line above
    "gC" 'my/comment-until-end-of-line
    "]b" '(next-buffer     :which-key "next buffer")
    "[b" '(previous-buffer :which-key "previous buffer"))
#+END_SRC
